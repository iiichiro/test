VGhlIHByaW1hcnkgY29tcG9uZW50IHdoaWNoIGNvbm5lY3RzIHRvIHRoZSBFdGhlcmV1bSAyLjAgUDJQIG5ldHdvcmsgYW5kDQpkb3dubG9hZHMsIHZlcmlmaWVzIGFuZCBzdG9yZXMgYmxvY2tzLiBQcm92aWRlcyBhIEhUVFAgQVBJIGZvciBxdWVyeWluZyB0aGUNCmJlYWNvbiBjaGFpbiBhbmQgcHVibGlzaGluZyBtZXNzYWdlcyB0byB0aGUgbmV0d29yay4NCg0KVXNhZ2U6IGxpZ2h0aG91c2UgYmVhY29uX25vZGUgW09QVElPTlNdDQoNCk9wdGlvbnM6DQogICAgICCBmoNmg0KDWINOg1SDQ4NZgsmJZYu/DQogICAgICAtLWF1dG8tY29tcGFjdC1kYiA8YXV0by1jb21wYWN0LWRiPg0KICAgICAgICAgIEVuYWJsZSBvciBkaXNhYmxlIGF1dG9tYXRpYyBjb21wYWN0aW9uIG9mIHRoZSBkYXRhYmFzZSBvbg0KICAgICAgICAgIGZpbmFsaXphdGlvbi4gW2RlZmF1bHQ6IHRydWVdDQoNCiAgICAgIC0tYmxvYi1wcnVuZS1tYXJnaW4tZXBvY2hzIDxFUE9DSFM+DQogICAgICAgICAgVGhlIG1hcmdpbiBmb3IgYmxvYiBwcnVuaW5nIGluIGVwb2Nocy4gVGhlIG9sZGVzdCBibG9icyBhcmUgcHJ1bmVkIHVwDQogICAgICAgICAgdW50aWwgZGF0YV9hdmFpbGFiaWxpdHlfYm91bmRhcnkgLSBibG9iX3BydW5lX21hcmdpbl9lcG9jaHMuIFtkZWZhdWx0Og0KICAgICAgICAgIDBdDQogICAgICAtLWJsb2JzLWRpciA8RElSPg0KICAgICAgICAgIERhdGEgZGlyZWN0b3J5IGZvciB0aGUgYmxvYnMgZGF0YWJhc2UuDQogICAgICAtLWJsb2NrLWNhY2hlLXNpemUgPFNJWkU+DQogICAgICAgICAgU3BlY2lmaWVzIGhvdyBtYW55IGJsb2NrcyB0aGUgZGF0YWJhc2Ugc2hvdWxkIGNhY2hlIGluIG1lbW9yeQ0KICAgICAgICAgIFtkZWZhdWx0OiA1XQ0KDQogICAgICCBmlAyUJLKkE2Ct4LpjMWS6ILMg1SBW4NviOqXlw0KICAgICAgLS1ib290LW5vZGVzIDxFTlIvTVVMVElBRERSIExJU1Q+DQogICAgICAgICAgT25lIG9yIG1vcmUgY29tbWEtZGVsaW1pdGVkIGJhc2U2NC1lbmNvZGVkIEVOUidzIHRvIGJvb3RzdHJhcCB0aGUgcDJwDQogICAgICAgICAgbmV0d29yay4gTXVsdGlhZGRyIGlzIGFsc28gc3VwcG9ydGVkLg0KDQogICAgICCBmk1FVoLIgsyCxYNvg4qDZoFbg16XcIFIDQogICAgICAtLWJ1aWxkZXIgPGJ1aWxkZXI+DQogICAgICAgICAgVGhlIFVSTCBvZiBhIHNlcnZpY2UgY29tcGF0aWJsZSB3aXRoIHRoZSBNRVYtYm9vc3QgQVBJLg0KICAgICAgLS1idWlsZGVyLWZhbGxiYWNrLWVwb2Nocy1zaW5jZS1maW5hbGl6YXRpb24gPGJ1aWxkZXItZmFsbGJhY2stZXBvY2hzLXNpbmNlLWZpbmFsaXphdGlvbj4NCiAgICAgICAgICBJZiB0aGlzIG5vZGUgaXMgcHJvcG9zaW5nIGEgYmxvY2sgYW5kIHRoZSBjaGFpbiBoYXMgbm90IGZpbmFsaXplZA0KICAgICAgICAgIHdpdGhpbiB0aGlzIG51bWJlciBvZiBlcG9jaHMsIGl0IHdpbGwgTk9UIHF1ZXJ5IGFueSBjb25uZWN0ZWQNCiAgICAgICAgICBidWlsZGVycywgYW5kIHdpbGwgdXNlIHRoZSBsb2NhbCBleGVjdXRpb24gZW5naW5lIGZvciBwYXlsb2FkDQogICAgICAgICAgY29uc3RydWN0aW9uLiBTZXR0aW5nIHRoaXMgdmFsdWUgdG8gYW55dGhpbmcgbGVzcyB0aGFuIDIgd2lsbCBjYXVzZQ0KICAgICAgICAgIHRoZSBub2RlIHRvIE5FVkVSIHF1ZXJ5IGNvbm5lY3RlZCBidWlsZGVycy4gU2V0dGluZyBpdCB0byAyIHdpbGwgY2F1c2UNCiAgICAgICAgICB0aGlzIGNvbmRpdGlvbiB0byBiZSBoaXQgaWYgdGhlcmUgYXJlIHNraXBzIHNsb3RzIGF0IHRoZSBzdGFydCBvZiBhbg0KICAgICAgICAgIGVwb2NoLCByaWdodCBiZWZvcmUgdGhpcyBub2RlIGlzIHNldCB0byBwcm9wb3NlLiBbZGVmYXVsdDogM10NCiAgICAgIC0tYnVpbGRlci1mYWxsYmFjay1za2lwcyA8YnVpbGRlci1mYWxsYmFjay1za2lwcz4NCiAgICAgICAgICBJZiB0aGlzIG5vZGUgaXMgcHJvcG9zaW5nIGEgYmxvY2sgYW5kIGhhcyBzZWVuIHRoaXMgbnVtYmVyIG9mIHNraXANCiAgICAgICAgICBzbG90cyBvbiB0aGUgY2Fub25pY2FsIGNoYWluIGluIGEgcm93LCBpdCB3aWxsIE5PVCBxdWVyeSBhbnkgY29ubmVjdGVkDQogICAgICAgICAgYnVpbGRlcnMsIGFuZCB3aWxsIHVzZSB0aGUgbG9jYWwgZXhlY3V0aW9uIGVuZ2luZSBmb3IgcGF5bG9hZA0KICAgICAgICAgIGNvbnN0cnVjdGlvbi4gW2RlZmF1bHQ6IDNdDQogICAgICAtLWJ1aWxkZXItZmFsbGJhY2stc2tpcHMtcGVyLWVwb2NoIDxidWlsZGVyLWZhbGxiYWNrLXNraXBzLXBlci1lcG9jaD4NCiAgICAgICAgICBJZiB0aGlzIG5vZGUgaXMgcHJvcG9zaW5nIGEgYmxvY2sgYW5kIGhhcyBzZWVuIHRoaXMgbnVtYmVyIG9mIHNraXANCiAgICAgICAgICBzbG90cyBvbiB0aGUgY2Fub25pY2FsIGNoYWluIGluIHRoZSBwYXN0IGBTTE9UU19QRVJfRVBPQ0hgLCBpdCB3aWxsDQogICAgICAgICAgTk9UIHF1ZXJ5IGFueSBjb25uZWN0ZWQgYnVpbGRlcnMsIGFuZCB3aWxsIHVzZSB0aGUgbG9jYWwgZXhlY3V0aW9uDQogICAgICAgICAgZW5naW5lIGZvciBwYXlsb2FkIGNvbnN0cnVjdGlvbi4gW2RlZmF1bHQ6IDhdDQogICAgICAtLWJ1aWxkZXItaGVhZGVyLXRpbWVvdXQgPE1JTExJU0VDT05EUz4NCiAgICAgICAgICBEZWZpbmVzIGEgdGltZW91dCB2YWx1ZSAoaW4gbWlsbGlzZWNvbmRzKSB0byB1c2Ugd2hlbiBmZXRjaGluZyBhIGJsb2NrDQogICAgICAgICAgaGVhZGVyIGZyb20gdGhlIGJ1aWxkZXIgQVBJLiBbZGVmYXVsdDogMTAwMF0NCiAgICAgIC0tYnVpbGRlci11c2VyLWFnZW50IDxTVFJJTkc+DQogICAgICAgICAgVGhlIEhUVFAgdXNlciBhZ2VudCB0byBzZW5kIGFsb25nc2lkZSByZXF1ZXN0cyB0byB0aGUgYnVpbGRlciBVUkwuIFRoZQ0KICAgICAgICAgIGRlZmF1bHQgaXMgTGlnaHRob3VzZSdzIHZlcnNpb24gc3RyaW5nLg0KDQogICAgICCBmoNgg0aDYoNOg3yDQ4OTg2eTr4r6gsVgLS1jaGVja3BvaW50LXN5bmMtdXJsYILwl5iXcIK1gsiCoo/qjYeCyY5ngqSBSA0KICAgICAgLS1jaGVja3BvaW50LWJsb2JzIDxCTE9CU19TU1o+DQogICAgICAgICAgU2V0IHRoZSBjaGVja3BvaW50IGJsb2JzIHRvIHN0YXJ0IHN5bmNpbmcgZnJvbS4gTXVzdCBiZSBhbGlnbmVkIGFuZA0KICAgICAgICAgIG1hdGNoIC0tY2hlY2twb2ludC1ibG9jay4gVXNpbmcgLS1jaGVja3BvaW50LXN5bmMtdXJsIGluc3RlYWQgaXMNCiAgICAgICAgICByZWNvbW1lbmRlZC4NCiAgICAgIC0tY2hlY2twb2ludC1ibG9jayA8QkxPQ0tfU1NaPg0KICAgICAgICAgIFNldCBhIGNoZWNrcG9pbnQgYmxvY2sgdG8gc3RhcnQgc3luY2luZyBmcm9tLiBNdXN0IGJlIGFsaWduZWQgYW5kDQogICAgICAgICAgbWF0Y2ggLS1jaGVja3BvaW50LXN0YXRlLiBVc2luZyAtLWNoZWNrcG9pbnQtc3luYy11cmwgaW5zdGVhZCBpcw0KICAgICAgICAgIHJlY29tbWVuZGVkLg0KICAgICAgLS1jaGVja3BvaW50LXN0YXRlIDxTVEFURV9TU1o+DQogICAgICAgICAgU2V0IGEgY2hlY2twb2ludCBzdGF0ZSB0byBzdGFydCBzeW5jaW5nIGZyb20uIE11c3QgYmUgYWxpZ25lZCBhbmQNCiAgICAgICAgICBtYXRjaCAtLWNoZWNrcG9pbnQtYmxvY2suIFVzaW5nIC0tY2hlY2twb2ludC1zeW5jLXVybCBpbnN0ZWFkIGlzDQogICAgICAgICAgcmVjb21tZW5kZWQuDQoNCiAgICAgIIGag2CDRoNig06DfINDg5ODZ5OvivqCyZeYl3CCt4Lpg3KBW4NSg5ODbYFbg2hIVFRQg0eDk4Nog3yDQ4OTg2cNCiAgICAgIC0tY2hlY2twb2ludC1zeW5jLXVybCA8QkVBQ09OX05PREU+DQogICAgICAgICAgU2V0IHRoZSByZW1vdGUgYmVhY29uIG5vZGUgSFRUUCBlbmRwb2ludCB0byB1c2UgZm9yIGNoZWNrcG9pbnQgc3luYy4NCiAgICAgIC0tY2hlY2twb2ludC1zeW5jLXVybC10aW1lb3V0IDxTRUNPTkRTPg0KICAgICAgICAgIFNldCB0aGUgdGltZW91dCBmb3IgY2hlY2twb2ludCBzeW5jIGNhbGxzIHRvIHJlbW90ZSBiZWFjb24gbm9kZSBIVFRQDQogICAgICAgICAgZW5kcG9pbnQuIFtkZWZhdWx0OiAxODBdDQoNCiAgLWQsIC0tZGF0YWRpciA8RElSPg0KICAgICAgICAgIFVzZWQgdG8gc3BlY2lmeSBhIGN1c3RvbSByb290IGRhdGEgZGlyZWN0b3J5IGZvciBsaWdodGhvdXNlIGtleXMgYW5kDQogICAgICAgICAgZGF0YWJhc2VzLiBEZWZhdWx0cyB0byAkSE9NRS8ubGlnaHRob3VzZS97bmV0d29ya30gd2hlcmUgbmV0d29yayBpcw0KICAgICAgICAgIHRoZSB2YWx1ZSBvZiB0aGUgYG5ldHdvcmtgIGZsYWcgTm90ZTogVXNlcnMgc2hvdWxkIHNwZWNpZnkgc2VwYXJhdGUNCiAgICAgICAgICBjdXN0b20gZGF0YWRpcnMgZm9yIGRpZmZlcmVudCBuZXR3b3Jrcy4NCg0KICAgICAggZqPb5fNg42DT4OMg3iDi4FCisSOi5dwgUINCiAgICAgIC0tZGVidWctbGV2ZWwgPExFVkVMPg0KICAgICAgICAgIFNwZWNpZmllcyB0aGUgdmVyYm9zaXR5IGxldmVsIHVzZWQgd2hlbiBlbWl0dGluZyBsb2dzIHRvIHRoZSB0ZXJtaW5hbC4NCiAgICAgICAgICBbZGVmYXVsdDogaW5mb10gW3Bvc3NpYmxlIHZhbHVlczogaW5mbywgZGVidWcsIHRyYWNlLCB3YXJuLCBlcnJvciwNCiAgICAgICAgICBjcml0XQ0KDQogICAgICCBmoNsg2KDZ4OPgVuDTorWmEENCiAgICAgIC0tZGlzY292ZXJ5LXBvcnQgPFBPUlQ+DQogICAgICAgICAgVGhlIFVEUCBwb3J0IHRoYXQgZGlzY292ZXJ5IHdpbGwgbGlzdGVuIG9uLiBEZWZhdWx0cyB0byBgcG9ydGANCiAgICAgIC0tZGlzY292ZXJ5LXBvcnQ2IDxQT1JUPg0KICAgICAgICAgIFRoZSBVRFAgcG9ydCB0aGF0IGRpc2NvdmVyeSB3aWxsIGxpc3RlbiBvbiBvdmVyIElQdjYgaWYgbGlzdGVuaW5nIG92ZXINCiAgICAgICAgICBib3RoIElQdjQgYW5kIElQdjYuIERlZmF1bHRzIHRvIGBwb3J0NmANCg0KICAgICAggZqDjYFbg0qDi4NtgVuDaILFk6+K+oK3gumP6o2HgsmXmJdwgreC6YFIDQogICAgICAtLWVuci1hZGRyZXNzIDxBRERSRVNTPi4uLg0KICAgICAgICAgIFRoZSBJUCBhZGRyZXNzLyBETlMgYWRkcmVzcyB0byBicm9hZGNhc3QgdG8gb3RoZXIgcGVlcnMgb24gaG93IHRvDQogICAgICAgICAgcmVhY2ggdGhpcyBub2RlLiBJZiBhIEROUyBhZGRyZXNzIGlzIHByb3ZpZGVkLCB0aGUgZW5yLWFkZHJlc3MgaXMgc2V0DQogICAgICAgICAgdG8gdGhlIElQIGFkZHJlc3MgaXQgcmVzb2x2ZXMgdG8gYW5kIGRvZXMgbm90IGF1dG8tdXBkYXRlIGJhc2VkIG9uDQogICAgICAgICAgUE9ORyByZXNwb25zZXMgaW4gZGlzY292ZXJ5LiBTZXQgdGhpcyBvbmx5IGlmIHlvdSBhcmUgc3VyZSBvdGhlciBub2Rlcw0KICAgICAgICAgIGNhbiBjb25uZWN0IHRvIHlvdXIgbG9jYWwgbm9kZSBvbiB0aGlzIGFkZHJlc3MuIFRoaXMgd2lsbCB1cGRhdGUgdGhlDQogICAgICAgICAgYGlwNGAgb3IgYGlwNmAgRU5SIGZpZWxkcyBhY2NvcmRpbmdseS4gVG8gdXBkYXRlIGJvdGgsIHNldCB0aGlzIGZsYWcNCiAgICAgICAgICB0d2ljZSB3aXRoIHRoZSBkaWZmZXJlbnQgdmFsdWVzLg0KICAgICAgLS1lbnItcXVpYy1wb3J0IDxQT1JUPg0KICAgICAgICAgIFRoZSBxdWljIFVEUDQgcG9ydCB0aGF0IHdpbGwgYmUgc2V0IG9uIHRoZSBsb2NhbCBFTlIuIFNldCB0aGlzIG9ubHkgaWYNCiAgICAgICAgICB5b3UgYXJlIHN1cmUgb3RoZXIgbm9kZXMgY2FuIGNvbm5lY3QgdG8geW91ciBsb2NhbCBub2RlIG9uIHRoaXMgcG9ydA0KICAgICAgICAgIG92ZXIgSVB2NC4NCiAgICAgIC0tZW5yLXF1aWM2LXBvcnQgPFBPUlQ+DQogICAgICAgICAgVGhlIHF1aWMgVURQNiBwb3J0IHRoYXQgd2lsbCBiZSBzZXQgb24gdGhlIGxvY2FsIEVOUi4gU2V0IHRoaXMgb25seSBpZg0KICAgICAgICAgIHlvdSBhcmUgc3VyZSBvdGhlciBub2RlcyBjYW4gY29ubmVjdCB0byB5b3VyIGxvY2FsIG5vZGUgb24gdGhpcyBwb3J0DQogICAgICAgICAgb3ZlciBJUHY2Lg0KICAgICAgLS1lbnItdGNwLXBvcnQgPFBPUlQ+DQogICAgICAgICAgVGhlIFRDUDQgcG9ydCBvZiB0aGUgbG9jYWwgRU5SLiBTZXQgdGhpcyBvbmx5IGlmIHlvdSBhcmUgc3VyZSBvdGhlcg0KICAgICAgICAgIG5vZGVzIGNhbiBjb25uZWN0IHRvIHlvdXIgbG9jYWwgbm9kZSBvbiB0aGlzIHBvcnQgb3ZlciBJUHY0LiBUaGUNCiAgICAgICAgICAtLXBvcnQgZmxhZyBpcyB1c2VkIGlmIHRoaXMgaXMgbm90IHNldC4NCiAgICAgIC0tZW5yLXRjcDYtcG9ydCA8UE9SVD4NCiAgICAgICAgICBUaGUgVENQNiBwb3J0IG9mIHRoZSBsb2NhbCBFTlIuIFNldCB0aGlzIG9ubHkgaWYgeW91IGFyZSBzdXJlIG90aGVyDQogICAgICAgICAgbm9kZXMgY2FuIGNvbm5lY3QgdG8geW91ciBsb2NhbCBub2RlIG9uIHRoaXMgcG9ydCBvdmVyIElQdjYuIFRoZQ0KICAgICAgICAgIC0tcG9ydDYgZmxhZyBpcyB1c2VkIGlmIHRoaXMgaXMgbm90IHNldC4NCiAgICAgIC0tZW5yLXVkcC1wb3J0IDxQT1JUPg0KICAgICAgICAgIFRoZSBVRFA0IHBvcnQgb2YgdGhlIGxvY2FsIEVOUi4gU2V0IHRoaXMgb25seSBpZiB5b3UgYXJlIHN1cmUgb3RoZXINCiAgICAgICAgICBub2RlcyBjYW4gY29ubmVjdCB0byB5b3VyIGxvY2FsIG5vZGUgb24gdGhpcyBwb3J0IG92ZXIgSVB2NC4NCiAgICAgIC0tZW5yLXVkcDYtcG9ydCA8UE9SVD4NCiAgICAgICAgICBUaGUgVURQNiBwb3J0IG9mIHRoZSBsb2NhbCBFTlIuIFNldCB0aGlzIG9ubHkgaWYgeW91IGFyZSBzdXJlIG90aGVyDQogICAgICAgICAgbm9kZXMgY2FuIGNvbm5lY3QgdG8geW91ciBsb2NhbCBub2RlIG9uIHRoaXMgcG9ydCBvdmVyIElQdjYuDQoNCiAgICAgIIGag2aBW4Neje2PnIrUinWK1phBgUgNCiAgICAgIC0tZXBvY2hzLXBlci1ibG9iLXBydW5lIDxFUE9DSFM+DQogICAgICAgICAgVGhlIGVwb2NoIGludGVydmFsIHdpdGggd2hpY2ggdG8gcHJ1bmUgYmxvYnMgZnJvbSBMaWdodGhvdXNlJ3MNCiAgICAgICAgICBkYXRhYmFzZSB3aGVuIHRoZXkgYXJlIG9sZGVyIHRoYW4gdGhlIGRhdGEgYXZhaWxhYmlsaXR5IGJvdW5kYXJ5DQogICAgICAgICAgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgZXBvY2guIFtkZWZhdWx0OiAxXQ0KICAgICAggZqDZoNCg1iDTklPgsmJZYu/DQogICAgICAtLWVwb2Nocy1wZXItbWlncmF0aW9uIDxOPg0KICAgICAgICAgIFRoZSBudW1iZXIgb2YgZXBvY2hzIHRvIHdhaXQgYmV0d2VlbiBydW5uaW5nIHRoZSBtaWdyYXRpb24gb2YgZGF0YQ0KICAgICAgICAgIGZyb20gdGhlIGhvdCBEQiB0byB0aGUgY29sZCBEQi4gTGVzcyBmcmVxdWVudCBydW5zIGNhbiBiZSB1c2VmdWwgZm9yDQogICAgICAgICAgbWluaW1pemluZyBkaXNrIHdyaXRlcyBbZGVmYXVsdDogMV0NCg0KICAgICAggZqOwI1zg06DiYNDg0GDk4NnitaYQYFIDQogICAgICAtLWV0aDEtYmxvY2tzLXBlci1sb2ctcXVlcnkgPEJMT0NLUz4NCiAgICAgICAgICBTcGVjaWZpZXMgdGhlIG51bWJlciBvZiBibG9ja3MgdGhhdCBhIGRlcG9zaXQgbG9nIHF1ZXJ5IHNob3VsZCBzcGFuLg0KICAgICAgICAgIFRoaXMgd2lsbCByZWR1Y2UgdGhlIHNpemUgb2YgcmVzcG9uc2VzIGZyb20gdGhlIEV0aDEgZW5kcG9pbnQuDQogICAgICAgICAgW2RlZmF1bHQ6IDEwMDBdDQogICAgICAtLWV0aDEtY2FjaGUtZm9sbG93LWRpc3RhbmNlIDxCTE9DS1M+DQogICAgICAgICAgU3BlY2lmaWVzIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBFdGgxIGNoYWluIGhlYWQgYW5kIHRoZSBsYXN0IGJsb2NrDQogICAgICAgICAgd2hpY2ggc2hvdWxkIGJlIGltcG9ydGVkIGludG8gdGhlIGNhY2hlLiBTZXR0aW5nIHRoaXMgdmFsdWUgbG93ZXIgY2FuDQogICAgICAgICAgaGVscCBjb21wZW5zYXRlIGZvciBpcnJlZ3VsYXIgUHJvb2Ytb2YtV29yayBibG9jayB0aW1lcywgYnV0IHNldHRpbmcNCiAgICAgICAgICBpdCB0b28gbG93IGNhbiBtYWtlIHRoZSBub2RlIHZ1bG5lcmFibGUgdG8gcmUtb3Jncy4NCg0KICAgICAggZqOwI1zg06DiYNDg0GDk4NngsaCzJhBjGeK1phBDQogICAgICAtLWV4ZWN1dGlvbi1lbmRwb2ludCA8RVhFQ1VUSU9OLUVORFBPSU5UPg0KICAgICAgICAgIFNlcnZlciBlbmRwb2ludCBmb3IgYW4gZXhlY3V0aW9uIGxheWVyIEpXVC1hdXRoZW50aWNhdGVkIEhUVFAgSlNPTi1SUEMNCiAgICAgICAgICBjb25uZWN0aW9uLiBVc2VzIHRoZSBzYW1lIGVuZHBvaW50IHRvIHBvcHVsYXRlIHRoZSBkZXBvc2l0IGNhY2hlLg0KICAgICAgLS1leGVjdXRpb24tand0IDxFWEVDVVRJT04tSldUPg0KICAgICAgICAgIEZpbGUgcGF0aCB3aGljaCBjb250YWlucyB0aGUgaGV4LWVuY29kZWQgSldUIHNlY3JldCBmb3IgdGhlIGV4ZWN1dGlvbg0KICAgICAgICAgIGVuZHBvaW50IHByb3ZpZGVkIGluIHRoZSAtLWV4ZWN1dGlvbi1lbmRwb2ludCBmbGFnLg0KICAgICAgLS1leGVjdXRpb24tand0LWlkIDxFWEVDVVRJT04tSldULUlEPg0KICAgICAgICAgIFVzZWQgYnkgdGhlIGJlYWNvbiBub2RlIHRvIGNvbW11bmljYXRlIGEgdW5pcXVlIGlkZW50aWZpZXIgdG8NCiAgICAgICAgICBleGVjdXRpb24gbm9kZXMgZHVyaW5nIEpXVCBhdXRoZW50aWNhdGlvbi4gSXQgY29ycmVzcG9uZHMgdG8gdGhlICdpZCcNCiAgICAgICAgICBmaWVsZCBpbiB0aGUgSldUIGNsYWltcyBvYmplY3QuU2V0IHRvIGVtcHR5IGJ5IGRlZmF1bHQNCiAgICAgIC0tZXhlY3V0aW9uLWp3dC1zZWNyZXQta2V5IDxFWEVDVVRJT04tSldULVNFQ1JFVC1LRVk+DQogICAgICAgICAgSGV4LWVuY29kZWQgSldUIHNlY3JldCBmb3IgdGhlIGV4ZWN1dGlvbiBlbmRwb2ludCBwcm92aWRlZCBpbiB0aGUNCiAgICAgICAgICAtLWV4ZWN1dGlvbi1lbmRwb2ludCBmbGFnLg0KICAgICAgLS1leGVjdXRpb24tand0LXZlcnNpb24gPEVYRUNVVElPTi1KV1QtVkVSU0lPTj4NCiAgICAgICAgICBVc2VkIGJ5IHRoZSBiZWFjb24gbm9kZSB0byBjb21tdW5pY2F0ZSBhIGNsaWVudCB2ZXJzaW9uIHRvIGV4ZWN1dGlvbg0KICAgICAgICAgIG5vZGVzIGR1cmluZyBKV1QgYXV0aGVudGljYXRpb24uIEl0IGNvcnJlc3BvbmRzIHRvIHRoZSAnY2x2JyBmaWVsZCBpbg0KICAgICAgICAgIHRoZSBKV1QgY2xhaW1zIG9iamVjdC5TZXQgdG8gZW1wdHkgYnkgZGVmYXVsdA0KICAgICAgLS1leGVjdXRpb24tdGltZW91dC1tdWx0aXBsaWVyIDxOVU0+DQogICAgICAgICAgVW5zaWduZWQgaW50ZWdlciB0byBtdWx0aXBseSB0aGUgZGVmYXVsdCBleGVjdXRpb24gdGltZW91dHMgYnkuDQogICAgICAgICAgW2RlZmF1bHQ6IDFdDQoNCiAgICAgIIGag2+DioNmgVuDXorWmEGBSA0KICAgICAgLS1mb3JrLWNob2ljZS1iZWZvcmUtcHJvcG9zYWwtdGltZW91dCA8Zm9yay1jaG9pY2UtYmVmb3JlLXByb3Bvc2FsLXRpbWVvdXQ+DQogICAgICAgICAgU2V0IHRoZSBtYXhpbXVtIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBmb3IgZm9yayBjaG9pY2UgYmVmb3JlDQogICAgICAgICAgcHJvcG9zaW5nIGEgYmxvY2suIFlvdSBjYW4gcHJldmVudCB3YWl0aW5nIGF0IGFsbCBieSBzZXR0aW5nIHRoZQ0KICAgICAgICAgIHRpbWVvdXQgdG8gMCwgaG93ZXZlciB5b3UgcmlzayBwcm9wb3NpbmcgYXRvcCB0aGUgd3JvbmcgcGFyZW50IGJsb2NrLg0KICAgICAgICAgIFtkZWZhdWx0OiAyNTBdDQoNCiAgICAgIC0tZnJlZXplci1kaXIgPERJUj4NCiAgICAgICAgICBEYXRhIGRpcmVjdG9yeSBmb3IgdGhlIGZyZWV6ZXIgZGF0YWJhc2UuDQoNCiAgICAgIIGak6+K+orWmEENCiAgICAgIC0tZ2VuZXNpcy1zdGF0ZS11cmwgPFVSTD4NCiAgICAgICAgICBBIFVSTCBvZiBhIGJlYWNvbi1BUEkgY29tcGF0aWJsZSBzZXJ2ZXIgZnJvbSB3aGljaCB0byBkb3dubG9hZCB0aGUNCiAgICAgICAgICBnZW5lc2lzIHN0YXRlLiBDaGVja3BvaW50IHN5bmMgc2VydmVyIFVSTHMgY2FuIGdlbmVyYWxseSBiZSB1c2VkIHdpdGgNCiAgICAgICAgICB0aGlzIGZsYWcuIElmIG5vdCBzdXBwbGllZCwgYSBkZWZhdWx0IFVSTCBvciB0aGUgLS1jaGVja3BvaW50LXN5bmMtdXJsDQogICAgICAgICAgbWF5IGJlIHVzZWQuIElmIHRoZSBnZW5lc2lzIHN0YXRlIGlzIGFscmVhZHkgaW5jbHVkZWQgaW4gdGhpcyBiaW5hcnkNCiAgICAgICAgICB0aGVuIHRoaXMgdmFsdWUgd2lsbCBiZSBpZ25vcmVkLg0KICAgICAgLS1nZW5lc2lzLXN0YXRlLXVybC10aW1lb3V0IDxTRUNPTkRTPg0KICAgICAgICAgIFRoZSB0aW1lb3V0IGluIHNlY29uZHMgZm9yIHRoZSByZXF1ZXN0IHRvIC0tZ2VuZXNpcy1zdGF0ZS11cmwuDQogICAgICAgICAgW2RlZmF1bHQ6IDE4MF0NCg0KICAgICAggZqXdpKyjbgNCiAgICAgIC0tZ3JhZmZpdGkgPEdSQUZGSVRJPg0KICAgICAgICAgIFNwZWNpZnkgeW91ciBjdXN0b20gZ3JhZmZpdGkgdG8gYmUgaW5jbHVkZWQgaW4gYmxvY2tzLiBEZWZhdWx0cyB0byB0aGUNCiAgICAgICAgICBjdXJyZW50IHZlcnNpb24gYW5kIGNvbW1pdCwgdHJ1bmNhdGVkIHRvIGZpdCBpbiAzMiBieXRlcy4NCg0KICAgICAggZqDgYOCg4qCyZXbjp2Ct4Lpl5qX8INmgVuDXoFCkZ2C4oK3gsaDgYOCg4qOZ5dwl8qC4JGdgqaC6ZF6kuiBQg0KICAgICAgLS1oaXN0b3JpYy1zdGF0ZS1jYWNoZS1zaXplIDxTSVpFPg0KICAgICAgICAgIFNwZWNpZmllcyBob3cgbWFueSBzdGF0ZXMgZnJvbSB0aGUgZnJlZXplciBkYXRhYmFzZSBzaG91bGQgY2FjaGUgaW4NCiAgICAgICAgICBtZW1vcnkgW2RlZmF1bHQ6IDFdDQoNCiAgICAgIIGaQVBJitaYQQ0KICAgICAgLS1odHRwLWFkZHJlc3MgPEFERFJFU1M+DQogICAgICAgICAgU2V0IHRoZSBsaXN0ZW4gYWRkcmVzcyBmb3IgdGhlIFJFU1RmdWwgSFRUUCBBUEkgc2VydmVyLg0KICAgICAgLS1odHRwLWFsbG93LW9yaWdpbiA8T1JJR0lOPg0KICAgICAgICAgIFNldCB0aGUgdmFsdWUgb2YgdGhlIEFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbiByZXNwb25zZSBIVFRQIGhlYWRlci4NCiAgICAgICAgICBVc2UgKiB0byBhbGxvdyBhbnkgb3JpZ2luIChub3QgcmVjb21tZW5kZWQgaW4gcHJvZHVjdGlvbikuIElmIG5vIHZhbHVlDQogICAgICAgICAgaXMgc3VwcGxpZWQsIHRoZSBDT1JTIGFsbG93ZWQgb3JpZ2luIGlzIHNldCB0byB0aGUgbGlzdGVuIGFkZHJlc3Mgb2YNCiAgICAgICAgICB0aGlzIHNlcnZlciAoZS5nLiwgaHR0cDovL2xvY2FsaG9zdDo1MDUyKS4NCiAgICAgIC0taHR0cC1kdXBsaWNhdGUtYmxvY2stc3RhdHVzIDxTVEFUVVNfQ09ERT4NCiAgICAgICAgICBTdGF0dXMgY29kZSB0byBzZW5kIHdoZW4gYSBibG9jayB0aGF0IGlzIGFscmVhZHkga25vd24gaXMgUE9TVGVkIHRvDQogICAgICAgICAgdGhlIEhUVFAgQVBJLg0KICAgICAggZpBUEmCzImek5qRrJN4gsmJZYu/gUgNCiAgICAgIC0taHR0cC1lbmFibGUtYmVhY29uLXByb2Nlc3NvciA8Qk9PTEVBTj4NCiAgICAgICAgICBUaGUgYmVhY29uIHByb2Nlc3NvciBpcyBhIHNjaGVkdWxlciB3aGljaCBwcm92aWRlcyBxdWFsaXR5LW9mLXNlcnZpY2UNCiAgICAgICAgICBhbmQgRG9TIHByb3RlY3Rpb24uIFdoZW4gc2V0IHRvICJ0cnVlIiwgSFRUUCBBUEkgcmVxdWVzdHMgd2lsbCBiZQ0KICAgICAgICAgIHF1ZXVlZCBhbmQgc2NoZWR1bGVkIGFsb25nc2lkZSBvdGhlciB0YXNrcy4gV2hlbiBzZXQgdG8gImZhbHNlIiwgSFRUUA0KICAgICAgICAgIEFQSSByZXNwb25zZXMgd2lsbCBiZSBleGVjdXRlZCBpbW1lZGlhdGVseS4NCiAgICAgIC0taHR0cC1wb3J0IDxQT1JUPg0KICAgICAgICAgIFNldCB0aGUgbGlzdGVuIFRDUCBwb3J0IGZvciB0aGUgUkVTVGZ1bCBIVFRQIEFQSSBzZXJ2ZXIuDQogICAgICAtLWh0dHAtc3NlLWNhcGFjaXR5LW11bHRpcGxpZXIgPE4+DQogICAgICAgICAgTXVsdGlwbGllciB0byBhcHBseSB0byB0aGUgbGVuZ3RoIG9mIEhUVFAgc2VydmVyLXNlbnQtZXZlbnQgKFNTRSkNCiAgICAgICAgICBjaGFubmVscy4gSW5jcmVhc2luZyB0aGlzIHZhbHVlIGNhbiBwcmV2ZW50IG1lc3NhZ2VzIGZyb20gYmVpbmcNCiAgICAgICAgICBkcm9wcGVkLg0KICAgICAgLS1odHRwLXRscy1jZXJ0IDxodHRwLXRscy1jZXJ0Pg0KICAgICAgICAgIFRoZSBwYXRoIG9mIHRoZSBjZXJ0aWZpY2F0ZSB0byBiZSB1c2VkIHdoZW4gc2VydmluZyB0aGUgSFRUUCBBUEkNCiAgICAgICAgICBzZXJ2ZXIgb3ZlciBUTFMuDQogICAgICAtLWh0dHAtdGxzLWtleSA8aHR0cC10bHMta2V5Pg0KICAgICAgICAgIFRoZSBwYXRoIG9mIHRoZSBwcml2YXRlIGtleSB0byBiZSB1c2VkIHdoZW4gc2VydmluZyB0aGUgSFRUUCBBUEkNCiAgICAgICAgICBzZXJ2ZXIgb3ZlciBUTFMuIE11c3Qgbm90IGJlIHBhc3N3b3JkLXByb3RlY3RlZC4NCiAgICAgIIGajvOQTYOKg06DR4NYg2eCzIOMgVuDZ4OKg36DYoNnDQogICAgICAtLWluYm91bmQtcmF0ZS1saW1pdGVyLXByb3RvY29scyA8aW5ib3VuZC1yYXRlLWxpbWl0ZXItcHJvdG9jb2xzPg0KICAgICAgICAgIENvbmZpZ3VyZXMgdGhlIGluYm91bmQgcmF0ZSBsaW1pdGVyIChyZXF1ZXN0cyByZWNlaXZlZCBieSB0aGlzDQogICAgICAgICAgbm9kZSkuUmF0ZSBsaW1pdCBxdW90YXMgcGVyIHByb3RvY29sIGNhbiBiZSBzZXQgaW4gdGhlIGZvcm0gb2YNCiAgICAgICAgICA8cHJvdG9jb2xfbmFtZT46PHRva2Vucz4vPHRpbWVfaW5fc2Vjb25kcz4uIFRvIHNldCBxdW90YXMgZm9yIG11bHRpcGxlDQogICAgICAgICAgcHJvdG9jb2xzLCBzZXBhcmF0ZSB0aGVtIGJ5ICc7Jy4gVGhpcyBpcyBlbmFibGVkIGJ5IGRlZmF1bHQsIHVzaW5nDQogICAgICAgICAgZGVmYXVsdCBxdW90YXMuIFRvIGRpc2FibGUgcmF0ZSBsaW1pdGluZyB1c2UgdGhlDQogICAgICAgICAgZGlzYWJsZS1pbmJvdW5kLXJhdGUtbGltaXRlciBmbGFnIGluc3RlYWQuDQoNCiAgICAgIIGaikqUrZdwDQogICAgICAtLWludmFsaWQtZ29zc2lwLXZlcmlmaWVkLWJsb2Nrcy1wYXRoIDxQQVRIPg0KICAgICAgICAgIElmIGEgYmxvY2sgc3VjY2VlZHMgZ29zc2lwIHZhbGlkYXRpb24gd2hpbHN0IGZhaWxpbmcgZnVsbCB2YWxpZGF0aW9uLA0KICAgICAgICAgIHN0b3JlIHRoZSBibG9jayBTU1ogYXMgYSBmaWxlIGF0IHRoaXMgcGF0aC4gVGhpcyBmZWF0dXJlIGlzIG9ubHkNCiAgICAgICAgICByZWNvbW1lbmRlZCBmb3IgZGV2ZWxvcGVycy4gVGhpcyBkaXJlY3RvcnkgaXMgbm90IHBydW5lZCwgdXNlcnMgc2hvdWxkDQogICAgICAgICAgYmUgY2FyZWZ1bCB0byBhdm9pZCBmaWxsaW5nIHVwIHRoZWlyIGRpc2tzLg0KDQogICAgICCBmpOvivqK1phBgUJQMlCQ2pGxkc6P24LwkN2S6IK3gumBQg0KICAgICAgLS1saWJwMnAtYWRkcmVzc2VzIDxNVUxUSUFERFI+DQogICAgICAgICAgT25lIG9yIG1vcmUgY29tbWEtZGVsaW1pdGVkIG11bHRpYWRkcnMgdG8gbWFudWFsbHkgY29ubmVjdCB0byBhIGxpYnAycA0KICAgICAgICAgIHBlZXIgd2l0aG91dCBhbiBFTlIuDQoNCiAgICAgIIGak6+K+orWmEENCiAgICAgIC0tbGlzdGVuLWFkZHJlc3MgWzxBRERSRVNTPi4uLl0NCiAgICAgICAgICBUaGUgYWRkcmVzcyBsaWdodGhvdXNlIHdpbGwgbGlzdGVuIGZvciBVRFAgYW5kIFRDUCBjb25uZWN0aW9ucy4gVG8NCiAgICAgICAgICBsaXN0ZW4gb3ZlciBJcFY0IGFuZCBJcFY2IHNldCB0aGlzIGZsYWcgdHdpY2Ugd2l0aCB0aGUgZGlmZmVyZW50DQogICAgICAgICAgdmFsdWVzLg0KICAgICAgICAgIEV4YW1wbGVzOg0KICAgICAgICAgIC0gLS1saXN0ZW4tYWRkcmVzcyAnMC4wLjAuMCcgd2lsbCBsaXN0ZW4gb3ZlciBJUHY0Lg0KICAgICAgICAgIC0gLS1saXN0ZW4tYWRkcmVzcyAnOjonIHdpbGwgbGlzdGVuIG92ZXIgSVB2Ni4NCiAgICAgICAgICAtIC0tbGlzdGVuLWFkZHJlc3MgJzAuMC4wLjAnIC0tbGlzdGVuLWFkZHJlc3MgJzo6JyB3aWxsIGxpc3RlbiBvdmVyDQogICAgICAgICAgYm90aCBJUHY0IGFuZCBJUHY2LiBUaGUgb3JkZXIgb2YgdGhlIGdpdmVuIGFkZHJlc3NlcyBpcyBub3QgcmVsZXZhbnQuDQogICAgICAgICAgSG93ZXZlciwgbXVsdGlwbGUgSVB2NCwgb3IgbXVsdGlwbGUgSVB2NiBhZGRyZXNzZXMgd2lsbCBub3QgYmUNCiAgICAgICAgICBhY2NlcHRlZC4gW2RlZmF1bHQ6IDAuMC4wLjBdDQoNCiAgICAgIIGag42DT4rWmEGBQorEjouXcIFCDQogICAgICAtLWxvZy1mb3JtYXQgPEZPUk1BVD4NCiAgICAgICAgICBTcGVjaWZpZXMgdGhlIGxvZyBmb3JtYXQgdXNlZCB3aGVuIGVtaXR0aW5nIGxvZ3MgdG8gdGhlIHRlcm1pbmFsLg0KICAgICAgICAgIFtwb3NzaWJsZSB2YWx1ZXM6IEpTT05dDQogICAgICAtLWxvZ2ZpbGUgPEZJTEU+DQogICAgICAgICAgRmlsZSBwYXRoIHdoZXJlIHRoZSBsb2cgZmlsZSB3aWxsIGJlIHN0b3JlZC4gT25jZSBpdCBncm93cyB0byB0aGUNCiAgICAgICAgICB2YWx1ZSBzcGVjaWZpZWQgaW4gYC0tbG9nZmlsZS1tYXgtc2l6ZWAgYSBuZXcgbG9nIGZpbGUgaXMgZ2VuZXJhdGVkDQogICAgICAgICAgd2hlcmUgZnV0dXJlIGxvZ3MgYXJlIHN0b3JlZC4gT25jZSB0aGUgbnVtYmVyIG9mIGxvZyBmaWxlcyBleGNlZWRzIHRoZQ0KICAgICAgICAgIHZhbHVlIHNwZWNpZmllZCBpbiBgLS1sb2dmaWxlLW1heC1udW1iZXJgIHRoZSBvbGRlc3QgbG9nIGZpbGUgd2lsbCBiZQ0KICAgICAgICAgIG92ZXJ3cml0dGVuLg0KICAgICAgLS1sb2dmaWxlLWRlYnVnLWxldmVsIDxMRVZFTD4NCiAgICAgICAgICBUaGUgdmVyYm9zaXR5IGxldmVsIHVzZWQgd2hlbiBlbWl0dGluZyBsb2dzIHRvIHRoZSBsb2cgZmlsZS4gW2RlZmF1bHQ6DQogICAgICAgICAgZGVidWddIFtwb3NzaWJsZSB2YWx1ZXM6IGluZm8sIGRlYnVnLCB0cmFjZSwgd2FybiwgZXJyb3IsIGNyaXRdDQogICAgICAtLWxvZ2ZpbGUtZm9ybWF0IDxGT1JNQVQ+DQogICAgICAgICAgU3BlY2lmaWVzIHRoZSBsb2cgZm9ybWF0IHVzZWQgd2hlbiBlbWl0dGluZyBsb2dzIHRvIHRoZSBsb2dmaWxlLg0KICAgICAgICAgIFtwb3NzaWJsZSB2YWx1ZXM6IERFRkFVTFQsIEpTT05dDQogICAgICAtLWxvZ2ZpbGUtbWF4LW51bWJlciA8Q09VTlQ+DQogICAgICAgICAgVGhlIG1heGltdW0gbnVtYmVyIG9mIGxvZyBmaWxlcyB0aGF0IHdpbGwgYmUgc3RvcmVkLiBJZiBzZXQgdG8gMCwNCiAgICAgICAgICBiYWNrZ3JvdW5kIGZpbGUgbG9nZ2luZyBpcyBkaXNhYmxlZC4gW2RlZmF1bHQ6IDEwXQ0KICAgICAgLS1sb2dmaWxlLW1heC1zaXplIDxTSVpFPg0KICAgICAgICAgIFRoZSBtYXhpbXVtIHNpemUgKGluIE1CKSBlYWNoIGxvZyBmaWxlIGNhbiBncm93IHRvIGJlZm9yZSByb3RhdGluZy4gSWYNCiAgICAgICAgICBzZXQgdG8gMCwgYmFja2dyb3VuZCBmaWxlIGxvZ2dpbmcgaXMgZGlzYWJsZWQuIFtkZWZhdWx0OiAyMDBdDQoNCiAgICAgIIGalXOWvoFCg2aDQoNYg06DWIN5gVuDWILMje2MuILJitaXXoFIDQogICAgICAtLW1heC1za2lwLXNsb3RzIDxOVU1fU0xPVFM+DQogICAgICAgICAgUmVmdXNlIHRvIHNraXAgbW9yZSB0aGFuIHRoaXMgbWFueSBzbG90cyB3aGVuIHByb2Nlc3NpbmcgYW4NCiAgICAgICAgICBhdHRlc3RhdGlvbi4gVGhpcyBwcmV2ZW50cyBub2RlcyBvbiBtaW5vcml0eSBmb3JrcyBmcm9tIHdhc3Rpbmcgb3VyDQogICAgICAgICAgdGltZSBhbmQgZGlzayBzcGFjZSwgYnV0IGNvdWxkIGFsc28gY2F1c2UgdW5uZWNlc3NhcnkgY29uc2Vuc3VzDQogICAgICAgICAgZmFpbHVyZXMsIHNvIGlzIGRpc2FibGVkIGJ5IGRlZmF1bHQuDQoNCiAgICAgIIGag4GDZ4OKg06DWIrWmEGBQorEjouXcIFCDQogICAgICAtLW1ldHJpY3MtYWRkcmVzcyA8QUREUkVTUz4NCiAgICAgICAgICBTZXQgdGhlIGxpc3RlbiBhZGRyZXNzIGZvciB0aGUgUHJvbWV0aGV1cyBtZXRyaWNzIEhUVFAgc2VydmVyLg0KICAgICAgLS1tZXRyaWNzLWFsbG93LW9yaWdpbiA8T1JJR0lOPg0KICAgICAgICAgIFNldCB0aGUgdmFsdWUgb2YgdGhlIEFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbiByZXNwb25zZSBIVFRQIGhlYWRlci4NCiAgICAgICAgICBVc2UgKiB0byBhbGxvdyBhbnkgb3JpZ2luIChub3QgcmVjb21tZW5kZWQgaW4gcHJvZHVjdGlvbikuIElmIG5vIHZhbHVlDQogICAgICAgICAgaXMgc3VwcGxpZWQsIHRoZSBDT1JTIGFsbG93ZWQgb3JpZ2luIGlzIHNldCB0byB0aGUgbGlzdGVuIGFkZHJlc3Mgb2YNCiAgICAgICAgICB0aGlzIHNlcnZlciAoZS5nLiwgaHR0cDovL2xvY2FsaG9zdDo1MDU0KS4NCiAgICAgIC0tbWV0cmljcy1wb3J0IDxQT1JUPg0KICAgICAgICAgIFNldCB0aGUgbGlzdGVuIFRDUCBwb3J0IGZvciB0aGUgUHJvbWV0aGV1cyBtZXRyaWNzIEhUVFAgc2VydmVyLg0KDQogICAgICCBmoKggtyC6IrWjFeCyIKiDQogICAgICAtLW1vbml0b3JpbmctZW5kcG9pbnQgPEFERFJFU1M+DQogICAgICAgICAgRW5hYmxlcyB0aGUgbW9uaXRvcmluZyBzZXJ2aWNlIGZvciBzZW5kaW5nIHN5c3RlbSBtZXRyaWNzIHRvIGEgcmVtb3RlDQogICAgICAgICAgZW5kcG9pbnQuIFRoaXMgY2FuIGJlIHVzZWQgdG8gbW9uaXRvciB5b3VyIHNldHVwIG9uIGNlcnRhaW4gc2VydmljZXMNCiAgICAgICAgICAoZS5nLiBiZWFjb25jaGEuaW4pLiBUaGlzIGZsYWcgc2V0cyB0aGUgZW5kcG9pbnQgd2hlcmUgdGhlIGJlYWNvbiBub2RlDQogICAgICAgICAgbWV0cmljcyB3aWxsIGJlIHNlbnQuIE5vdGU6IFRoaXMgd2lsbCBzZW5kIGluZm9ybWF0aW9uIHRvIGEgcmVtb3RlDQogICAgICAgICAgc2V2ZXIgd2hpY2ggbWF5IGlkZW50aWZ5IGFuZCBhc3NvY2lhdGUgeW91ciB2YWxpZGF0b3JzLCBJUCBhZGRyZXNzIGFuZA0KICAgICAgICAgIG90aGVyIHBlcnNvbmFsIGluZm9ybWF0aW9uLiBBbHdheXMgdXNlIGEgSFRUUFMgY29ubmVjdGlvbiBhbmQgbmV2ZXINCiAgICAgICAgICBwcm92aWRlIGFuIHVudHJ1c3RlZCBVUkwuDQogICAgICAtLW1vbml0b3JpbmctZW5kcG9pbnQtcGVyaW9kIDxTRUNPTkRTPg0KICAgICAgICAgIERlZmluZXMgaG93IG1hbnkgc2Vjb25kcyB0byB3YWl0IGJldHdlZW4gZWFjaCBtZXNzYWdlIHNlbnQgdG8gdGhlDQogICAgICAgICAgbW9uaXRvcmluZy1lbmRwb2ludC4gRGVmYXVsdDogNjBzDQoNCiAgICAgIIGakc6P24Nsg2KDZ4OPgVuDToFpTWFpbm5ldILIgseBag0KICAgICAgLS1uZXR3b3JrIDxuZXR3b3JrPg0KICAgICAgICAgIE5hbWUgb2YgdGhlIEV0aDIgY2hhaW4gTGlnaHRob3VzZSB3aWxsIHN5bmMgYW5kIGZvbGxvdy4gW3Bvc3NpYmxlDQogICAgICAgICAgdmFsdWVzOiBtYWlubmV0LCBnbm9zaXMsIGNoaWFkbywgc2Vwb2xpYSwgaG9sZXNreV0NCiAgICAgIC0tbmV0d29yay1kaXIgPERJUj4NCiAgICAgICAgICBEYXRhIGRpcmVjdG9yeSBmb3IgbmV0d29yayBrZXlzLiBEZWZhdWx0cyB0byBuZXR3b3JrLyBpbnNpZGUgdGhlDQogICAgICAgICAgYmVhY29uIG5vZGUgZGlyLg0KDQogICAgICCBmpOvivqK1phBDQogICAgICAtLXBvcnQgPFBPUlQ+DQogICAgICAgICAgVGhlIFRDUC9VRFAgcG9ydHMgdG8gbGlzdGVuIG9uLiBUaGVyZSBhcmUgdHdvIFVEUCBwb3J0cy4gVGhlIGRpc2NvdmVyeQ0KICAgICAgICAgIFVEUCBwb3J0IHdpbGwgYmUgc2V0IHRvIHRoaXMgdmFsdWUgYW5kIHRoZSBRdWljIFVEUCBwb3J0IHdpbGwgYmUgc2V0DQogICAgICAgICAgdG8gdGhpcyB2YWx1ZSArIDEuIFRoZSBkaXNjb3ZlcnkgcG9ydCBjYW4gYmUgbW9kaWZpZWQgYnkgdGhlDQogICAgICAgICAgLS1kaXNjb3ZlcnktcG9ydCBmbGFnIGFuZCB0aGUgcXVpYyBwb3J0IGNhbiBiZSBtb2RpZmllZCBieSB0aGUNCiAgICAgICAgICAtLXF1aWMtcG9ydCBmbGFnLiBJZiBsaXN0ZW5pbmcgb3ZlciBib3RoIElQdjQgYW5kIElQdjYgdGhlIC0tcG9ydCBmbGFnDQogICAgICAgICAgd2lsbCBhcHBseSB0byB0aGUgSVB2NCBhZGRyZXNzIGFuZCAtLXBvcnQ2IHRvIHRoZSBJUHY2IGFkZHJlc3MuDQogICAgICAgICAgW2RlZmF1bHQ6IDkwMDBdDQogICAgICAtLXBvcnQ2IDxQT1JUPg0KICAgICAgICAgIFRoZSBUQ1AvVURQIHBvcnRzIHRvIGxpc3RlbiBvbiBvdmVyIElQdjYgd2hlbiBsaXN0ZW5pbmcgb3ZlciBib3RoIElQdjQNCiAgICAgICAgICBhbmQgSVB2Ni4gRGVmYXVsdHMgdG8gOTA5MCB3aGVuIHJlcXVpcmVkLiBUaGUgUXVpYyBVRFAgcG9ydCB3aWxsIGJlDQogICAgICAgICAgc2V0IHRvIHRoaXMgdmFsdWUgKyAxLiBbZGVmYXVsdDogOTA5MF0NCg0KICAgICAggZqOwI1zg06DiYNDg0GDk4NngsaCzJhBjGeXcIFIDQogICAgICAtLXByZXBhcmUtcGF5bG9hZC1sb29rYWhlYWQgPE1JTExJU0VDT05EUz4NCiAgICAgICAgICBUaGUgdGltZSBiZWZvcmUgdGhlIHN0YXJ0IG9mIGEgcHJvcG9zYWwgc2xvdCBhdCB3aGljaCBwYXlsb2FkDQogICAgICAgICAgYXR0cmlidXRlcyBzaG91bGQgYmUgc2VudC4gTG93IHZhbHVlcyBhcmUgdXNlZnVsIGZvciBleGVjdXRpb24gbm9kZXMNCiAgICAgICAgICB3aGljaCBkb24ndCBpbXByb3ZlIHRoZWlyIHBheWxvYWQgYWZ0ZXIgdGhlIGZpcnN0IGNhbGwsIGFuZCBoaWdoDQogICAgICAgICAgdmFsdWVzIGFyZSB1c2VmdWwgZm9yIGVuc3VyaW5nIHRoZSBFTCBpcyBnaXZlbiBhbXBsZSBub3RpY2UuIERlZmF1bHQ6DQogICAgICAgICAgMS8zIG9mIGEgc2xvdC4NCg0KICAgICAgLS1wcm9ncmVzc2l2ZS1iYWxhbmNlcyA8TU9ERT4NCiAgICAgICAgICBEZXByZWNhdGVkLiBUaGlzIG9wdGltaXNhdGlvbiBpcyBub3cgdGhlIGRlZmF1bHQgYW5kIGNhbm5vdCBiZQ0KICAgICAgICAgIGRpc2FibGVkLg0KDQogICAgICCBmoNvg4qDZoFbg16XcIFIDQogICAgICAtLXByb3Bvc2VyLXJlb3JnLWN1dG9mZiA8TUlMTElTRUNPTkRTPg0KICAgICAgICAgIE1heGltdW0gZGVsYXkgYWZ0ZXIgdGhlIHN0YXJ0IG9mIHRoZSBzbG90IGF0IHdoaWNoIHRvIHByb3Bvc2UgYQ0KICAgICAgICAgIHJlb3JnaW5nIGJsb2NrLiBMb3dlciB2YWx1ZXMgY2FuIHByZXZlbnQgZmFpbGVkIHJlb3JncyBieSBlbnN1cmluZyB0aGUNCiAgICAgICAgICBibG9jayBoYXMgYW1wbGUgdGltZSB0byBwcm9wYWdhdGUgYW5kIGJlIHByb2Nlc3NlZCBieSB0aGUgbmV0d29yay4gVGhlDQogICAgICAgICAgZGVmYXVsdCBpcyAxLzEydGggb2YgYSBzbG90ICgxIHNlY29uZCBvbiBtYWlubmV0KQ0KICAgICAggZqVc5a+gUKDdoONg3yBW4NVgsmCwoKigsSXdpKyjbiBQg0KICAgICAgLS1wcm9wb3Nlci1yZW9yZy1kaXNhbGxvd2VkLW9mZnNldHMgPE4xLE4yLC4uLj4NCiAgICAgICAgICBDb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBpbnRlZ2VyIG9mZnNldHMgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYXZvaWQNCiAgICAgICAgICBwcm9wb3NpbmcgcmVvcmdpbmcgYmxvY2tzIGF0IGNlcnRhaW4gc2xvdHMuIEFuIG9mZnNldCBvZiBOIG1lYW5zIHRoYXQNCiAgICAgICAgICByZW9yZ2luZyBwcm9wb3NhbHMgd2lsbCBub3QgYmUgYXR0ZW1wdGVkIGF0IGFueSBzbG90IHN1Y2ggdGhhdCBgc2xvdCAlDQogICAgICAgICAgU0xPVFNfUEVSX0VQT0NIID09IE5gLiBCeSBkZWZhdWx0IG9ubHkgcmUtb3JncyBhdCBvZmZzZXQgMCB3aWxsIGJlDQogICAgICAgICAgYXZvaWRlZC4gQW55IG9mZnNldHMgc3VwcGxpZWQgd2l0aCB0aGlzIGZsYWcgd2lsbCBpbXBvc2UgYWRkaXRpb25hbA0KICAgICAgICAgIHJlc3RyaWN0aW9ucy4NCiAgICAgIC0tcHJvcG9zZXItcmVvcmctZXBvY2hzLXNpbmNlLWZpbmFsaXphdGlvbiA8RVBPQ0hTPg0KICAgICAgICAgIE1heGltdW0gbnVtYmVyIG9mIGVwb2NocyBzaW5jZSBmaW5hbGl6YXRpb24gYXQgd2hpY2ggcHJvcG9zZXIgcmVvcmdzDQogICAgICAgICAgYXJlIGFsbG93ZWQuIERlZmF1bHQ6IDINCiAgICAgIC0tcHJvcG9zZXItcmVvcmctcGFyZW50LXRocmVzaG9sZCA8UEVSQ0VOVD4NCiAgICAgICAgICBQZXJjZW50YWdlIG9mIHBhcmVudCB2b3RlIHdlaWdodCBhYm92ZSB3aGljaCB0byBhdHRlbXB0IGEgcHJvcG9zZXINCiAgICAgICAgICByZW9yZy4gRGVmYXVsdDogMTYwJQ0KICAgICAgLS1wcm9wb3Nlci1yZW9yZy10aHJlc2hvbGQgPFBFUkNFTlQ+DQogICAgICAgICAgUGVyY2VudGFnZSBvZiBoZWFkIHZvdGUgd2VpZ2h0IGJlbG93IHdoaWNoIHRvIGF0dGVtcHQgYSBwcm9wb3Nlcg0KICAgICAgICAgIHJlb3JnLiBEZWZhdWx0OiAyMCUNCg0KICAgICAggZqDZoFbg16K1phBDQogICAgICAtLXBydW5lLWJsb2JzIDxCT09MRUFOPg0KICAgICAgICAgIFBydW5lIGJsb2JzIGZyb20gTGlnaHRob3VzZSdzIGRhdGFiYXNlIHdoZW4gdGhleSBhcmUgb2xkZXIgdGhhbiB0aGUNCiAgICAgICAgICBkYXRhIGRhdGEgYXZhaWxhYmlsaXR5IGJvdW5kYXJ5IHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50IGVwb2NoLg0KICAgICAgICAgIFtkZWZhdWx0OiB0cnVlXQ0KICAgICAggZqOwI1zg06DiYNDg0GDk4NngsmViYnXgqqCqYKpgumCxoLMgrGCxoFpg2aDdINIg4uDZ5dMjPiBaoFCDQogICAgICAtLXBydW5lLXBheWxvYWRzIDxwcnVuZS1wYXlsb2Fkcz4NCiAgICAgICAgICBQcnVuZSBleGVjdXRpb24gcGF5bG9hZHMgZnJvbSBMaWdodGhvdXNlJ3MgZGF0YWJhc2UuIFRoaXMgc2F2ZXMgc3BhY2UNCiAgICAgICAgICBidXQgaW1wb3NlcyBsb2FkIG9uIHRoZSBleGVjdXRpb24gY2xpZW50LCBhcyBwYXlsb2FkcyBuZWVkIHRvIGJlDQogICAgICAgICAgcmVjb25zdHJ1Y3RlZCBhbmQgc2VudCB0byBzeW5jaW5nIHBlZXJzLiBbZGVmYXVsdDogdHJ1ZV0NCg0KICAgICAggZqTr4r6itaYQQ0KICAgICAgLS1xdWljLXBvcnQgPFBPUlQ+DQogICAgICAgICAgVGhlIFVEUCBwb3J0IHRoYXQgcXVpYyB3aWxsIGxpc3RlbiBvbi4gRGVmYXVsdHMgdG8gYHBvcnRgICsgMQ0KICAgICAgLS1xdWljLXBvcnQ2IDxQT1JUPg0KICAgICAgICAgIFRoZSBVRFAgcG9ydCB0aGF0IHF1aWMgd2lsbCBsaXN0ZW4gb24gb3ZlciBJUHY2IGlmIGxpc3RlbmluZyBvdmVyIGJvdGgNCiAgICAgICAgICBJUHY0IGFuZCBJUHY2LiBEZWZhdWx0cyB0byBgcG9ydDZgICsgMQ0KDQogICAgICCBmpBHguqCyIKilfuCqoKigqINCiAgICAgIC0tc2FmZS1zbG90cy10by1pbXBvcnQtb3B0aW1pc3RpY2FsbHkgPElOVEVHRVI+DQogICAgICAgICAgVXNlZCB0byBjb29yZGluYXRlIG1hbnVhbCBvdmVycmlkZXMgb2YgdGhlDQogICAgICAgICAgU0FGRV9TTE9UU19UT19JTVBPUlRfT1BUSU1JU1RJQ0FMTFkgcGFyYW1ldGVyLiBUaGlzIGZsYWcgc2hvdWxkIG9ubHkNCiAgICAgICAgICBiZSB1c2VkIGlmIHRoZSB1c2VyIGhhcyBhIGNsZWFyIHVuZGVyc3RhbmRpbmcgdGhhdCB0aGUgYnJvYWQgRXRoZXJldW0NCiAgICAgICAgICBjb21tdW5pdHkgaGFzIGVsZWN0ZWQgdG8gb3ZlcnJpZGUgdGhpcyBwYXJhbWV0ZXIgaW4gdGhlIGV2ZW50IG9mIGFuDQogICAgICAgICAgYXR0YWNrIGF0IHRoZSBQb1MgdHJhbnNpdGlvbiBibG9jay4gSW5jb3JyZWN0IHVzZSBvZiB0aGlzIGZsYWcgY2FuDQogICAgICAgICAgY2F1c2UgeW91ciBub2RlIHRvIHBvc3NpYmx5IGFjY2VwdCBhbiBpbnZhbGlkIGNoYWluIG9yIHN5bmMgbW9yZQ0KICAgICAgICAgIHNsb3dseS4gQmUgZXh0cmVtZWx5IGNhcmVmdWwgd2l0aCB0aGlzIGZsYWcuDQoNCiAgICAgIIGakZeQTYOKg06DR4NYg2eCzIOMgVuDZ4OKg36DYoNnDQogICAgICAtLXNlbGYtbGltaXRlci1wcm90b2NvbHMgPHNlbGYtbGltaXRlci1wcm90b2NvbHM+DQogICAgICAgICAgRW5hYmxlcyB0aGUgb3V0Ym91bmQgcmF0ZSBsaW1pdGVyIChyZXF1ZXN0cyBtYWRlIGJ5IHRoaXMgbm9kZSkuUmF0ZQ0KICAgICAgICAgIGxpbWl0IHF1b3RhcyBwZXIgcHJvdG9jb2wgY2FuIGJlIHNldCBpbiB0aGUgZm9ybSBvZg0KICAgICAgICAgIDxwcm90b2NvbF9uYW1lPjo8dG9rZW5zPi88dGltZV9pbl9zZWNvbmRzPi4gVG8gc2V0IHF1b3RhcyBmb3IgbXVsdGlwbGUNCiAgICAgICAgICBwcm90b2NvbHMsIHNlcGFyYXRlIHRoZW0gYnkgJzsnLiBJZiB0aGUgc2VsZiByYXRlIGxpbWl0ZXIgaXMgZW5hYmxlZA0KICAgICAgICAgIGFuZCBhIHByb3RvY29sIGlzIG5vdCBwcmVzZW50IGluIHRoZSBjb25maWd1cmF0aW9uLCB0aGUgcXVvdGFzIHVzZWQNCiAgICAgICAgICBmb3IgdGhlIGluYm91bmQgcmF0ZSBsaW1pdGVyIHdpbGwgYmUgdXNlZC4NCg0KICAgICAggZpBUEmK1phBDQogICAgICAtLXNodWZmbGluZy1jYWNoZS1zaXplIDxzaHVmZmxpbmctY2FjaGUtc2l6ZT4NCiAgICAgICAgICBTb21lIEhUVFAgQVBJIHJlcXVlc3RzIGNhbiBiZSBvcHRpbWlzZWQgYnkgY2FjaGluZyB0aGUgc2h1ZmZsaW5ncyBhdA0KICAgICAgICAgIGVhY2ggZXBvY2guIFRoaXMgZmxhZyBhbGxvd3MgdGhlIHVzZXIgdG8gc2V0IHRoZSBzaHVmZmxpbmcgY2FjaGUgc2l6ZQ0KICAgICAgICAgIGluIGVwb2Nocy4gU2h1ZmZsaW5ncyBhcmUgZGVwZW5kZW50IG9uIHZhbGlkYXRvciBjb3VudCBhbmQgc2V0dGluZw0KICAgICAgICAgIHRoaXMgdmFsdWUgdG8gYSBsYXJnZSBudW1iZXIgY2FuIGNvbnN1bWUgYSBsYXJnZSBhbW91bnQgb2YgbWVtb3J5Lg0KDQogICAgICCBmoNYg4mDYoNWg4OBW4rWmEGBQoNYg4mDYoNWg4OBW5dMjPiOnoLMgr2C34LMg0mDdoNWg4eDk5dwDQogICAgICAtLXNsYXNoZXItYXR0LWNhY2hlLXNpemUgPENPVU5UPg0KICAgICAgICAgIFNldCB0aGUgbWF4aW11bSBudW1iZXIgb2YgYXR0ZXN0YXRpb24gcm9vdHMgZm9yIHRoZSBzbGFzaGVyIHRvIGNhY2hlDQogICAgICAtLXNsYXNoZXItYmFja2VuZCA8REFUQUJBU0U+DQogICAgICAgICAgU2V0IHRoZSBkYXRhYmFzZSBiYWNrZW5kIHRvIGJlIHVzZWQgYnkgdGhlIHNsYXNoZXIuIFtwb3NzaWJsZSB2YWx1ZXM6DQogICAgICAgICAgbG1kYiwgZGlzYWJsZWRdDQogICAgICAtLXNsYXNoZXItYnJvYWRjYXN0IFs8c2xhc2hlci1icm9hZGNhc3Q+XQ0KICAgICAgICAgIEJyb2FkY2FzdCBzbGFzaGluZ3MgZm91bmQgYnkgdGhlIHNsYXNoZXIgdG8gdGhlIHJlc3Qgb2YgdGhlIG5ldHdvcmsNCiAgICAgICAgICBbRW5hYmxlZCBieSBkZWZhdWx0XS4gW2RlZmF1bHQ6IHRydWVdDQogICAgICAtLXNsYXNoZXItY2h1bmstc2l6ZSA8RVBPQ0hTPg0KICAgICAgICAgIE51bWJlciBvZiBlcG9jaHMgcGVyIHZhbGlkYXRvciBwZXIgY2h1bmsgc3RvcmVkIG9uIGRpc2suDQogICAgICAtLXNsYXNoZXItZGlyIDxQQVRIPg0KICAgICAgICAgIFNldCB0aGUgc2xhc2hlcidzIGRhdGFiYXNlIGRpcmVjdG9yeS4NCiAgICAgIC0tc2xhc2hlci1oaXN0b3J5LWxlbmd0aCA8RVBPQ0hTPg0KICAgICAgICAgIENvbmZpZ3VyZSBob3cgbWFueSBlcG9jaHMgb2YgaGlzdG9yeSB0aGUgc2xhc2hlciBrZWVwcy4gSW1tdXRhYmxlDQogICAgICAgICAgYWZ0ZXIgaW5pdGlhbGl6YXRpb24uDQogICAgICAtLXNsYXNoZXItbWF4LWRiLXNpemUgPEdJR0FCWVRFUz4NCiAgICAgICAgICBNYXhpbXVtIHNpemUgb2YgdGhlIE1EQlggZGF0YWJhc2UgdXNlZCBieSB0aGUgc2xhc2hlci4NCiAgICAgIC0tc2xhc2hlci1zbG90LW9mZnNldCA8U0VDT05EUz4NCiAgICAgICAgICBTZXQgdGhlIGRlbGF5IGZyb20gdGhlIHN0YXJ0IG9mIHRoZSBzbG90IGF0IHdoaWNoIHRoZSBzbGFzaGVyIHNob3VsZA0KICAgICAgICAgIGluZ2VzdCBhdHRlc3RhdGlvbnMuIE9ubHkgZWZmZWN0aXZlIGlmIHRoZSBzbGFzaGVyLXVwZGF0ZS1wZXJpb2QgaXMgYQ0KICAgICAgICAgIG11bHRpcGxlIG9mIHRoZSBzbG90IGR1cmF0aW9uLg0KICAgICAgLS1zbGFzaGVyLXVwZGF0ZS1wZXJpb2QgPFNFQ09ORFM+DQogICAgICAgICAgQ29uZmlndXJlIGhvdyBvZnRlbiB0aGUgc2xhc2hlciBydW5zIGJhdGNoIHByb2Nlc3NpbmcuDQogICAgICAtLXNsYXNoZXItdmFsaWRhdG9yLWNodW5rLXNpemUgPE5VTV9WQUxJREFUT1JTPg0KICAgICAgICAgIE51bWJlciBvZiB2YWxpZGF0b3JzIHBlciBjaHVuayBzdG9yZWQgb24gZGlzay4NCg0KICAgICAggZqDZoNCg1iDToNUg0ODWYLJiWWLv4K3gumRepLoDQogICAgICAtLXNsb3RzLXBlci1yZXN0b3JlLXBvaW50IDxTTE9UX0NPVU5UPg0KICAgICAgICAgIFNwZWNpZmllcyBob3cgb2Z0ZW4gYSBmcmVlemVyIERCIHJlc3RvcmUgcG9pbnQgc2hvdWxkIGJlIHN0b3JlZC4NCiAgICAgICAgICBDYW5ub3QgYmUgY2hhbmdlZCBhZnRlciBpbml0aWFsaXphdGlvbi4gW2RlZmF1bHQ6IDgxOTIgKG1haW5uZXQpIG9yIDY0DQogICAgICAgICAgKG1pbmltYWwpXQ0KDQogICAgICCBmoOBg4KDiorWmEGBSA0KICAgICAgLS1zdGF0ZS1jYWNoZS1zaXplIDxTVEFURV9DQUNIRV9TSVpFPg0KICAgICAgICAgIFNwZWNpZmllcyB0aGUgc2l6ZSBvZiB0aGUgc3RhdGUgY2FjaGUgW2RlZmF1bHQ6IDEyOF0NCg0KICAgICAggZqDb4OKg2aBW4Nel3ANCiAgICAgIC0tc3VnZ2VzdGVkLWZlZS1yZWNpcGllbnQgPFNVR0dFU1RFRC1GRUUtUkVDSVBJRU5UPg0KICAgICAgICAgIEVtZXJnZW5jeSBmYWxsYmFjayBmZWUgcmVjaXBpZW50IGZvciB1c2UgaW4gY2FzZSB0aGUgdmFsaWRhdG9yIGNsaWVudA0KICAgICAgICAgIGRvZXMgbm90IGhhdmUgb25lIGNvbmZpZ3VyZWQuIFlvdSBzaG91bGQgc2V0IHRoaXMgZmxhZyBvbiB0aGUNCiAgICAgICAgICB2YWxpZGF0b3IgY2xpZW50IGluc3RlYWQgb2YgKG9yIGluIGFkZGl0aW9uIHRvKSBzZXR0aW5nIGl0IGhlcmUuDQoNCiAgLXQsIC0tdGVzdG5ldC1kaXIgPERJUj4NCiAgICAgICAgICBQYXRoIHRvIGRpcmVjdG9yeSBjb250YWluaW5nIGV0aDJfdGVzdG5ldCBzcGVjcy4gRGVmYXVsdHMgdG8gYQ0KICAgICAgICAgIGhhcmQtY29kZWQgTGlnaHRob3VzZSB0ZXN0bmV0LiBPbmx5IGVmZmVjdGl2ZSBpZiB0aGVyZSBpcyBubyBleGlzdGluZw0KICAgICAgICAgIGRhdGFiYXNlLg0KDQogICAgICCBmpOvivqK1phBgUJQZWVykJSBQg0KICAgICAgLS10YXJnZXQtcGVlcnMgPHRhcmdldC1wZWVycz4NCiAgICAgICAgICBUaGUgdGFyZ2V0IG51bWJlciBvZiBwZWVycy4NCg0KICAgICAggZqQR4LqgsiCopX7gqqCooKiDQogICAgICAtLXRlcm1pbmFsLWJsb2NrLWhhc2gtZXBvY2gtb3ZlcnJpZGUgPEVQT0NIPg0KICAgICAgICAgIFVzZWQgdG8gY29vcmRpbmF0ZSBtYW51YWwgb3ZlcnJpZGVzIHRvIHRoZQ0KICAgICAgICAgIFRFUk1JTkFMX0JMT0NLX0hBU0hfQUNUSVZBVElPTl9FUE9DSCBwYXJhbWV0ZXIuIFRoaXMgZmxhZyBzaG91bGQgb25seQ0KICAgICAgICAgIGJlIHVzZWQgaWYgdGhlIHVzZXIgaGFzIGEgY2xlYXIgdW5kZXJzdGFuZGluZyB0aGF0IHRoZSBicm9hZCBFdGhlcmV1bQ0KICAgICAgICAgIGNvbW11bml0eSBoYXMgZWxlY3RlZCB0byBvdmVycmlkZSB0aGUgdGVybWluYWwgUG9XIGJsb2NrLiBJbmNvcnJlY3QNCiAgICAgICAgICB1c2Ugb2YgdGhpcyBmbGFnIHdpbGwgY2F1c2UgeW91ciBub2RlIHRvIGV4cGVyaWVuY2UgYSBjb25zZW5zdXMNCiAgICAgICAgICBmYWlsdXJlLiBCZSBleHRyZW1lbHkgY2FyZWZ1bCB3aXRoIHRoaXMgZmxhZy4NCiAgICAgIC0tdGVybWluYWwtYmxvY2staGFzaC1vdmVycmlkZSA8VEVSTUlOQUxfQkxPQ0tfSEFTSD4NCiAgICAgICAgICBVc2VkIHRvIGNvb3JkaW5hdGUgbWFudWFsIG92ZXJyaWRlcyB0byB0aGUgVEVSTUlOQUxfQkxPQ0tfSEFTSA0KICAgICAgICAgIHBhcmFtZXRlci4gVGhpcyBmbGFnIHNob3VsZCBvbmx5IGJlIHVzZWQgaWYgdGhlIHVzZXIgaGFzIGEgY2xlYXINCiAgICAgICAgICB1bmRlcnN0YW5kaW5nIHRoYXQgdGhlIGJyb2FkIEV0aGVyZXVtIGNvbW11bml0eSBoYXMgZWxlY3RlZCB0bw0KICAgICAgICAgIG92ZXJyaWRlIHRoZSB0ZXJtaW5hbCBQb1cgYmxvY2suIEluY29ycmVjdCB1c2Ugb2YgdGhpcyBmbGFnIHdpbGwgY2F1c2UNCiAgICAgICAgICB5b3VyIG5vZGUgdG8gZXhwZXJpZW5jZSBhIGNvbnNlbnN1cyBmYWlsdXJlLiBCZSBleHRyZW1lbHkgY2FyZWZ1bCB3aXRoDQogICAgICAgICAgdGhpcyBmbGFnLg0KICAgICAgLS10ZXJtaW5hbC10b3RhbC1kaWZmaWN1bHR5LW92ZXJyaWRlIDxJTlRFR0VSPg0KICAgICAgICAgIFVzZWQgdG8gY29vcmRpbmF0ZSBtYW51YWwgb3ZlcnJpZGVzIHRvIHRoZSBURVJNSU5BTF9UT1RBTF9ESUZGSUNVTFRZDQogICAgICAgICAgcGFyYW1ldGVyLiBBY2NlcHRzIGEgMjU2LWJpdCBkZWNpbWFsIGludGVnZXIgKG5vdCBhIGhleCB2YWx1ZSkuIFRoaXMNCiAgICAgICAgICBmbGFnIHNob3VsZCBvbmx5IGJlIHVzZWQgaWYgdGhlIHVzZXIgaGFzIGEgY2xlYXIgdW5kZXJzdGFuZGluZyB0aGF0DQogICAgICAgICAgdGhlIGJyb2FkIEV0aGVyZXVtIGNvbW11bml0eSBoYXMgZWxlY3RlZCB0byBvdmVycmlkZSB0aGUgdGVybWluYWwNCiAgICAgICAgICBkaWZmaWN1bHR5LiBJbmNvcnJlY3QgdXNlIG9mIHRoaXMgZmxhZyB3aWxsIGNhdXNlIHlvdXIgbm9kZSB0bw0KICAgICAgICAgIGV4cGVyaWVuY2UgYSBjb25zZW5zdXMgZmFpbHVyZS4gQmUgZXh0cmVtZWx5IGNhcmVmdWwgd2l0aCB0aGlzIGZsYWcuDQoNCiAgICAgIIGak6+K+orWmEENCiAgICAgIC0tdHJ1c3RlZC1wZWVycyA8VFJVU1RFRF9QRUVSUz4NCiAgICAgICAgICBPbmUgb3IgbW9yZSBjb21tYS1kZWxpbWl0ZWQgdHJ1c3RlZCBwZWVyIGlkcyB3aGljaCBhbHdheXMgaGF2ZSB0aGUNCiAgICAgICAgICBoaWdoZXN0IHNjb3JlIGFjY29yZGluZyB0byB0aGUgcGVlciBzY29yaW5nIHN5c3RlbS4NCg0KICAgICAggZqVc5a+gUKDWoNig2eDQYNig3aBaY+JivqQ3ZLogWqK1phBgsGC24KigsyCxYrulnuTSYLJkN2S6IK1gsiCooLMgqqXx4KzgruCpIFCDQogICAgICAtLXRydXN0ZWQtc2V0dXAtZmlsZS1vdmVycmlkZSA8RklMRT4NCiAgICAgICAgICBQYXRoIHRvIGEganNvbiBmaWxlIGNvbnRhaW5pbmcgdGhlIHRydXN0ZWQgc2V0dXAgcGFyYW1zLiBOT1RFOiBUaGlzDQogICAgICAgICAgd2lsbCBvdmVycmlkZSB0aGUgdHJ1c3RlZCBzZXR1cCB0aGF0IGlzIGdlbmVyYXRlZCBmcm9tIHRoZSBtYWlubmV0IGt6Zw0KICAgICAgICAgIGNlcmVtb255LiBVc2Ugd2l0aCBjYXV0aW9uDQoNCiAgICAgIIGag4GDZ4OKg06DWIrWmEGBQorEjouXcIFCDQogICAgICCBmoNvg4qDZoFbg16KxI6Ll3CBaYjqioeOd5LogWoNCiAgICAgIC0tdmFsaWRhdG9yLW1vbml0b3ItZmlsZSA8UEFUSD4NCiAgICAgICAgICBBcyBwZXIgLS12YWxpZGF0b3ItbW9uaXRvci1wdWJrZXlzLCBidXQgdGhlIGNvbW1hLXNlcGFyYXRlZCBsaXN0IGlzDQogICAgICAgICAgY29udGFpbmVkIHdpdGhpbiBhIGZpbGUgYXQgdGhlIGdpdmVuIHBhdGguDQogICAgICCBmlByb21ldGhldXODjYNPgqqOfoLcgumBSA0KICAgICAgLS12YWxpZGF0b3ItbW9uaXRvci1pbmRpdmlkdWFsLXRyYWNraW5nLXRocmVzaG9sZCA8SU5URUdFUj4NCiAgICAgICAgICBPbmNlIHRoZSB2YWxpZGF0b3IgbW9uaXRvciByZWFjaGVzIHRoaXMgbnVtYmVyIG9mIGxvY2FsIHZhbGlkYXRvcnMgaXQNCiAgICAgICAgICB3aWxsIHN0b3AgY29sbGVjdGluZyBwZXItdmFsaWRhdG9yIFByb21ldGhldXMgbWV0cmljcyBhbmQgaXNzdWluZw0KICAgICAgICAgIHBlci12YWxpZGF0b3IgbG9ncy4gSW5zdGVhZCwgaXQgd2lsbCBwcm92aWRlIGFnZ3JlZ2F0ZSBtZXRyaWNzIGFuZA0KICAgICAgICAgIGxvZ3MuIFRoaXMgYXZvaWRzIGluZmVhc2libHkgaGlnaCBjYXJkaW5hbGl0eSBpbiB0aGUgUHJvbWV0aGV1cw0KICAgICAgICAgIGRhdGFiYXNlIGFuZCBoaWdoIGxvZyB2b2x1bWUgd2hlbiB1c2luZyBtYW55IHZhbGlkYXRvcnMuIERlZmF1bHRzIHRvDQogICAgICAgICAgNjQuDQogICAgICCBmoNvg4qDZoFbg16KxI6Ll3CBaYzClcqBag0KICAgICAgLS12YWxpZGF0b3ItbW9uaXRvci1wdWJrZXlzIDxQVUJLRVlTPg0KICAgICAgICAgIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgMHgtcHJlZml4ZWQgdmFsaWRhdG9yIHB1YmxpYyBrZXlzLiBUaGVzZQ0KICAgICAgICAgIHZhbGlkYXRvcnMgd2lsbCByZWNlaXZlIHNwZWNpYWwgbW9uaXRvcmluZyBhbmQgYWRkaXRpb25hbCBsb2dnaW5nLg0KDQogICAgICAtLXdzcy1jaGVja3BvaW50IDxXU1NfQ0hFQ0tQT0lOVD4NCiAgICAgICAgICBTcGVjaWZ5IGEgd2VhayBzdWJqZWN0aXZpdHkgY2hlY2twb2ludCBpbiBgYmxvY2tfcm9vdDplcG9jaGAgZm9ybWF0IHRvDQogICAgICAgICAgdmVyaWZ5IHRoZSBub2RlJ3Mgc3luYyBhZ2FpbnN0LiBUaGUgYmxvY2sgcm9vdCBzaG91bGQgYmUgMHgtcHJlZml4ZWQuDQogICAgICAgICAgTm90ZSB0aGF0IHRoaXMgZmxhZyBpcyBmb3IgdmVyaWZpY2F0aW9uIG9ubHksIHRvIHBlcmZvcm0gYSBjaGVja3BvaW50DQogICAgICAgICAgc3luYyBmcm9tIGEgcmVjZW50IHN0YXRlIHVzZSAtLWNoZWNrcG9pbnQtc3luYy11cmwuDQogIC1WLCAtLXZlcnNpb24NCiAgICAgICAgICBQcmludCB2ZXJzaW9uDQoNCkZsYWdzOg0KICAgICAgLS1hbGxvdy1pbnNlY3VyZS1nZW5lc2lzLXN5bmMNCiAgICAgICAgICBFbmFibGUgc3luY2luZyBmcm9tIGdlbmVzaXMsIHdoaWNoIGlzIGdlbmVyYWxseSBpbnNlY3VyZSBhbmQNCiAgICAgICAgICBpbmNvbXBhdGlibGUgd2l0aCBkYXRhIGF2YWlsYWJpbGl0eSBjaGVja3MuIENoZWNrcG9pbnQgc3luY2luZyBpcyB0aGUNCiAgICAgICAgICBwcmVmZXJyZWQgbWV0aG9kIGZvciBzeW5jaW5nIGEgbm9kZS4gT25seSB1c2UgdGhpcyBmbGFnIHdoZW4gdGVzdGluZy4NCiAgICAgICAgICBETyBOT1QgdXNlIG9uIG1haW5uZXQhDQogICAgICAtLWFsd2F5cy1wcmVmZXItYnVpbGRlci1wYXlsb2FkDQogICAgICAgICAgVGhpcyBmbGFnIGlzIGRlcHJlY2F0ZWQgYW5kIGhhcyBubyBlZmZlY3QuDQogICAgICAtLWFsd2F5cy1wcmVwYXJlLXBheWxvYWQNCiAgICAgICAgICBTZW5kIHBheWxvYWQgYXR0cmlidXRlcyB3aXRoIGV2ZXJ5IGZvcmsgY2hvaWNlIHVwZGF0ZS4gVGhpcyBpcw0KICAgICAgICAgIGludGVuZGVkIGZvciB1c2UgYnkgYmxvY2sgYnVpbGRlcnMsIHJlbGF5cyBhbmQgZGV2ZWxvcGVycy4gWW91IHNob3VsZA0KICAgICAgICAgIHNldCBhIGZlZSByZWNpcGllbnQgb24gdGhpcyBCTiBhbmQgYWxzbyBjb25zaWRlciBhZGp1c3RpbmcgdGhlDQogICAgICAgICAgLS1wcmVwYXJlLXBheWxvYWQtbG9va2FoZWFkIGZsYWcuDQogICAgICAtLWJ1aWxkZXItZmFsbGJhY2stZGlzYWJsZS1jaGVja3MNCiAgICAgICAgICBUaGlzIGZsYWcgZGlzYWJsZXMgYWxsIGNoZWNrcyByZWxhdGVkIHRvIGNoYWluIGhlYWx0aC4gVGhpcyBtZWFucyB0aGUNCiAgICAgICAgICBidWlsZGVyIEFQSSB3aWxsIGFsd2F5cyBiZSB1c2VkIGZvciBwYXlsb2FkIGNvbnN0cnVjdGlvbiwgcmVnYXJkbGVzcw0KICAgICAgICAgIG9mIHJlY2VudCBjaGFpbiBjb25kaXRpb25zLg0KDQogICAgICCBmoNmgVuDXoN4gVuDWILwiLOPa4K3gumBQo6pk66Is49ri0CUXIKqgqCC6YLMgsWCu4LBgr+CzJeYl3CCxZbikeiCyIKigsaCzIKxgsaBQg0KICAgICAgLS1jb21wYWN0LWRiDQogICAgICAgICAgSWYgcHJlc2VudCwgYXBwbHkgY29tcGFjdGlvbiB0byB0aGUgZGF0YWJhc2Ugb24gc3RhcnQtdXAuIFVzZSB3aXRoDQogICAgICAgICAgY2F1dGlvbi4gSXQgaXMgZ2VuZXJhbGx5IG5vdCByZWNvbW1lbmRlZCB1bmxlc3MgYXV0by1jb21wYWN0aW9uIGlzDQogICAgICAgICAgZGlzYWJsZWQuDQoNCiAgICAgIIGak6+K+orWmEGBQoNvg2KDToN0g0KDi5OvivqCzIOMgVuDZ4OKg36DYoNngvCWs4z4gsmCt4LpgUINCiAgICAgIIGajaGJ8YLNg1iDZYFbg0qBW4LFgs2CyIKigsyCxYFBlXSXXoK1gsSC4JbikeiCyIKikXqS6IFCDQogICAgICAtLWRpc2FibGUtYmFja2ZpbGwtcmF0ZS1saW1pdGluZw0KICAgICAgICAgIERpc2FibGUgdGhlIGJhY2tmaWxsIHN5bmMgcmF0ZS1saW1pdGluZy4gVGhpcyBhbGxvdyB1c2VycyB0byBqdXN0IHN5bmMNCiAgICAgICAgICB0aGUgZW50aXJlIGNoYWluIGFzIGZhc3QgYXMgcG9zc2libGUsIGhvd2V2ZXIgaXQgY2FuIHJlc3VsdCBpbg0KICAgICAgICAgIHJlc291cmNlIGNvbnRlbnRpb24gd2hpY2ggZGVncmFkZXMgc3Rha2luZyBwZXJmb3JtYW5jZS4gU3Rha2VycyBzaG91bGQNCiAgICAgICAgICBnZW5lcmFsbHkgY2hvb3NlIHRvIGF2b2lkIHRoaXMgZmxhZyBzaW5jZSBiYWNrZmlsbCBzeW5jIGlzIG5vdA0KICAgICAgICAgIHJlcXVpcmVkIGZvciBzdGFraW5nLg0KDQogICAgICCBmoyfj9iCtYLIgqKDcoFbg1KDk4NtgVuDaI1cknqXcIFCjJ+P2IK1gsiCooLMgsWDiYNDg2eDToOJg0ODQYOTg2eCxpOvgraC5oKkgsmCyILpgUgNCiAgICAgIC0tZGlzYWJsZS1kZXBvc2l0LWNvbnRyYWN0LXN5bmMNCiAgICAgICAgICBFeHBsaWNpdGx5IGRpc2FibGVzIHN5bmNpbmcgb2YgZGVwb3NpdCBsb2dzIGZyb20gdGhlIGV4ZWN1dGlvbiBub2RlLg0KICAgICAgICAgIFRoaXMgb3ZlcnJpZGVzIGFueSBwcmV2aW91cyBvcHRpb24gdGhhdCBkZXBlbmRzIG9uIGl0LiBVc2VmdWwgaWYgeW91DQogICAgICAgICAgaW50ZW5kIHRvIHJ1biBhIG5vbi12YWxpZGF0aW5nIGJlYWNvbiBub2RlLg0KDQogICAgICAtLWRpc2FibGUtZHVwbGljYXRlLXdhcm4tbG9ncw0KICAgICAgICAgIFRoaXMgZmxhZyBpcyBkZXByZWNhdGVkIGFuZCBoYXMgbm8gZWZmZWN0Lg0KDQogICAgICCBmpOvivqK1phBgUKTwYLJkN2S6IK1gsiCrYLEguBPS4FCDQogICAgICAtLWRpc2FibGUtZW5yLWF1dG8tdXBkYXRlDQogICAgICAgICAgRGlzY292ZXJ5IGF1dG9tYXRpY2FsbHkgdXBkYXRlcyB0aGUgbm9kZXMgbG9jYWwgRU5SIHdpdGggYW4gZXh0ZXJuYWwNCiAgICAgICAgICBJUCBhZGRyZXNzIGFuZCBwb3J0IGFzIHNlZW4gYnkgb3RoZXIgcGVlcnMgb24gdGhlIG5ldHdvcmsuIFRoaXMNCiAgICAgICAgICBkaXNhYmxlcyB0aGlzIGZlYXR1cmUsIGZpeGluZyB0aGUgRU5SJ3MgSVAvUE9SVCB0byB0aG9zZSBzcGVjaWZpZWQgb24NCiAgICAgICAgICBib290Lg0KDQogICAgICCBmo7zkE2DioNOg0eDWINngsyDjIFbg2eDioN+g2KDZ5azjPgNCiAgICAgIC0tZGlzYWJsZS1pbmJvdW5kLXJhdGUtbGltaXRlcg0KICAgICAgICAgIERpc2FibGVzIHRoZSBpbmJvdW5kIHJhdGUgbGltaXRlciAocmVxdWVzdHMgcmVjZWl2ZWQgYnkgdGhpcyBub2RlKS4NCg0KICAgICAgLS1kaXNhYmxlLWxvY2stdGltZW91dHMNCiAgICAgICAgICBUaGlzIGZsYWcgaXMgZGVwcmVjYXRlZCBhbmQgaGFzIG5vIGVmZmVjdC4NCg0KICAgICAggZqDjYNPitaYQQ0KICAgICAgLS1kaXNhYmxlLWxvZy10aW1lc3RhbXANCiAgICAgICAgICBJZiBwcmVzZW50LCBkbyBub3QgaW5jbHVkZSB0aW1lc3RhbXBzIGluIGxvZ2dpbmcgb3V0cHV0Lg0KDQogICAgICCBmpV0l16Ct4LpgrGCxoLFg4GDgoOKjmeXcJfKkZ2JwYFCg2aDb4Nig0+XcIFCDQogICAgICAtLWRpc2FibGUtbWFsbG9jLXR1bmluZw0KICAgICAgICAgIElmIHByZXNlbnQsIGRvIG5vdCBjb25maWd1cmUgdGhlIHN5c3RlbSBhbGxvY2F0b3IuIFByb3ZpZGluZyB0aGlzIGZsYWcNCiAgICAgICAgICB3aWxsIGdlbmVyYWxseSBpbmNyZWFzZSBtZW1vcnkgdXNhZ2UsIGl0IHNob3VsZCBvbmx5IGJlIHByb3ZpZGVkIHdoZW4NCiAgICAgICAgICBkZWJ1Z2dpbmcgc3BlY2lmaWMgbWVtb3J5IGFsbG9jYXRpb24gaXNzdWVzLg0KDQogICAgICAtLWRpc2FibGUtb3B0aW1pc3RpYy1maW5hbGl6ZWQtc3luYw0KICAgICAgICAgIEZvcmNlIExpZ2h0aG91c2UgdG8gdmVyaWZ5IGV2ZXJ5IGV4ZWN1dGlvbiBibG9jayBoYXNoIHdpdGggdGhlDQogICAgICAgICAgZXhlY3V0aW9uIGNsaWVudCBkdXJpbmcgZmluYWxpemVkIHN5bmMuIEJ5IGRlZmF1bHQgYmxvY2sgaGFzaGVzIHdpbGwNCiAgICAgICAgICBiZSBjaGVja2VkIGluIExpZ2h0aG91c2UgYW5kIG9ubHkgcGFzc2VkIHRvIHRoZSBFTCBpZiBpbml0aWFsDQogICAgICAgICAgdmVyaWZpY2F0aW9uIGZhaWxzLg0KICAgICAgLS1kaXNhYmxlLXBhY2tldC1maWx0ZXINCiAgICAgICAgICBEaXNhYmxlcyB0aGUgZGlzY292ZXJ5IHBhY2tldCBmaWx0ZXIuIFVzZWZ1bCBmb3IgdGVzdGluZyBpbiBzbWFsbGVyDQogICAgICAgICAgbmV0d29ya3MNCiAgICAgIC0tZGlzYWJsZS1wcm9wb3Nlci1yZW9yZ3MNCiAgICAgICAgICBEbyBub3QgYXR0ZW1wdCB0byByZW9yZyBsYXRlIGJsb2NrcyBmcm9tIG90aGVyIHZhbGlkYXRvcnMgd2hlbg0KICAgICAgICAgIHByb3Bvc2luZy4NCg0KICAgICAggZqTr4r6l3ANCiAgICAgIC0tZGlzYWJsZS1xdWljDQogICAgICAgICAgRGlzYWJsZXMgdGhlIHF1aWMgdHJhbnNwb3J0LiBUaGUgbm9kZSB3aWxsIHJlbHkgc29sZWx5IG9uIHRoZSBUQ1ANCiAgICAgICAgICB0cmFuc3BvcnQgZm9yIGxpYnAycCBjb25uZWN0aW9ucy4NCg0KICAgICAggZqRl5BNg4qDToNHg1iDZ4LMg4yBW4Nng4qDfoNig2eWs4z4DQogICAgICAtLWRpc2FibGUtc2VsZi1saW1pdGVyDQogICAgICAgICAgRGlzYWJsZXMgdGhlIG91dGJvdW5kIHJhdGUgbGltaXRlciAocmVxdWVzdHMgc2VudCBieSB0aGlzIG5vZGUpLg0KDQogICAgICAtLWRpc2FibGUtdXBucA0KICAgICAgICAgIERpc2FibGVzIFVQblAgc3VwcG9ydC4gU2V0dGluZyB0aGlzIHdpbGwgcHJldmVudCBMaWdodGhvdXNlIGZyb20NCiAgICAgICAgICBhdHRlbXB0aW5nIHRvIGF1dG9tYXRpY2FsbHkgZXN0YWJsaXNoIGV4dGVybmFsIHBvcnQgbWFwcGluZ3MuDQogICAgICAtLWR1bW15LWV0aDENCiAgICAgICAgICBJZiBwcmVzZW50LCB1c2VzIGFuIGV0aDEgYmFja2VuZCB0aGF0IGdlbmVyYXRlcyBzdGF0aWMgZHVtbXkNCiAgICAgICAgICBkYXRhLklkZW50aWNhbCB0byB0aGUgbWV0aG9kIHVzZWQgYXQgdGhlIDIwMTkgQ2FuYWRhIGludGVyb3AuDQogIC1lLCAtLWVuci1tYXRjaA0KICAgICAgICAgIFNldHMgdGhlIGxvY2FsIEVOUiBJUCBhZGRyZXNzIGFuZCBwb3J0IHRvIG1hdGNoIHRob3NlIHNldCBmb3INCiAgICAgICAgICBsaWdodGhvdXNlLiBTcGVjaWZpY2FsbHksIHRoZSBJUCBhZGRyZXNzIHdpbGwgYmUgdGhlIHZhbHVlIG9mDQogICAgICAgICAgLS1saXN0ZW4tYWRkcmVzcyBhbmQgdGhlIFVEUCBwb3J0IHdpbGwgYmUgLS1kaXNjb3ZlcnktcG9ydC4NCiAgICAgIC0tZW5hYmxlLXByaXZhdGUtZGlzY292ZXJ5DQogICAgICAgICAgTGlnaHRob3VzZSBieSBkZWZhdWx0IGRvZXMgbm90IGRpc2NvdmVyIHByaXZhdGUgSVAgYWRkcmVzc2VzLiBTZXQgdGhpcw0KICAgICAgICAgIGZsYWcgdG8gZW5hYmxlIGNvbm5lY3Rpb24gYXR0ZW1wdHMgdG8gbG9jYWwgYWRkcmVzc2VzLg0KICAgICAgLS1ldGgxDQogICAgICAgICAgSWYgcHJlc2VudCB0aGUgbm9kZSB3aWxsIGNvbm5lY3QgdG8gYW4gZXRoMSBub2RlLiBUaGlzIGlzIHJlcXVpcmVkIGZvcg0KICAgICAgICAgIGJsb2NrIHByb2R1Y3Rpb24sIHlvdSBtdXN0IHVzZSB0aGlzIGZsYWcgaWYgeW91IHdpc2ggdG8gc2VydmUgYQ0KICAgICAgICAgIHZhbGlkYXRvci4NCiAgICAgIC0tZXRoMS1wdXJnZS1jYWNoZQ0KICAgICAgICAgIFB1cmdlcyB0aGUgZXRoMSBibG9jayBhbmQgZGVwb3NpdCBjYWNoZXMNCiAgICAgIC0tZ2VuZXNpcy1iYWNrZmlsbA0KICAgICAgICAgIEF0dGVtcHRzIHRvIGRvd25sb2FkIGJsb2NrcyBhbGwgdGhlIHdheSBiYWNrIHRvIGdlbmVzaXMgd2hlbg0KICAgICAgICAgIGNoZWNrcG9pbnQgc3luY2luZy4NCiAgICAgIC0tZ3VpDQogICAgICAgICAgRW5hYmxlIHRoZSBncmFwaGljYWwgdXNlciBpbnRlcmZhY2UgYW5kIGFsbCBpdHMgcmVxdWlyZW1lbnRzLiBUaGlzDQogICAgICAgICAgZW5hYmxlcyAtLWh0dHAgYW5kIC0tdmFsaWRhdG9yLW1vbml0b3ItYXV0byBhbmQgZW5hYmxlcyBTU0UgbG9nZ2luZy4NCiAgLWgsIC0taGVscA0KICAgICAgICAgIFByaW50cyBoZWxwIGluZm9ybWF0aW9uDQoNCiAgICAgIIGaQVBJl0yM+A0KICAgICAgLS1odHRwDQogICAgICAgICAgRW5hYmxlIHRoZSBSRVNUZnVsIEhUVFAgQVBJIHNlcnZlci4gRGlzYWJsZWQgYnkgZGVmYXVsdC4NCg0KICAgICAgLS1odHRwLWVuYWJsZS10bHMNCiAgICAgICAgICBTZXJ2ZXMgdGhlIFJFU1RmdWwgSFRUUCBBUEkgc2VydmVyIG92ZXIgVExTLiBUaGlzIGZlYXR1cmUgaXMgY3VycmVudGx5DQogICAgICAgICAgZXhwZXJpbWVudGFsLg0KICAgICAgLS1pbXBvcnQtYWxsLWF0dGVzdGF0aW9ucw0KICAgICAgICAgIEltcG9ydCBhbmQgYWdncmVnYXRlIGFsbCBhdHRlc3RhdGlvbnMsIHJlZ2FyZGxlc3Mgb2YgdmFsaWRhdG9yDQogICAgICAgICAgc3Vic2NyaXB0aW9ucy4gVGhpcyB3aWxsIG9ubHkgaW1wb3J0IGF0dGVzdGF0aW9ucyBmcm9tDQogICAgICAgICAgYWxyZWFkeS1zdWJzY3JpYmVkIHN1Ym5ldHMsIHVzZSB3aXRoIC0tc3Vic2NyaWJlLWFsbC1zdWJuZXRzIHRvIGVuc3VyZQ0KICAgICAgICAgIGFsbCBhdHRlc3RhdGlvbnMgYXJlIHJlY2VpdmVkIGZvciBpbXBvcnQuDQogICAgICAtLWxpZ2h0LWNsaWVudC1zZXJ2ZXINCiAgICAgICAgICBBY3QgYXMgYSBmdWxsIG5vZGUgc3VwcG9ydGluZyBsaWdodCBjbGllbnRzIG9uIHRoZSBwMnAgbmV0d29yaw0KICAgICAgICAgIFtleHBlcmltZW50YWxdDQoNCiAgICAgIIGag42DT4rWmEENCiAgICAgIC0tbG9nLWNvbG9yDQogICAgICAgICAgRm9yY2Ugb3V0cHV0dGluZyBjb2xvcnMgd2hlbiBlbWl0dGluZyBsb2dzIHRvIHRoZSB0ZXJtaW5hbC4NCiAgICAgIIGag42DT4N0g0CDQ4OLgsyIs49rDQogICAgICAtLWxvZ2ZpbGUtY29tcHJlc3MNCiAgICAgICAgICBJZiBwcmVzZW50LCBjb21wcmVzcyBvbGQgbG9nIGZpbGVzLiBUaGlzIGNhbiBoZWxwIHJlZHVjZSB0aGUgc3BhY2UNCiAgICAgICAgICBuZWVkZWQgdG8gc3RvcmUgb2xkIGxvZ3MuDQogICAgICCBmoONg0+DdINAg0ODi4LMjKCMwA0KICAgICAgLS1sb2dmaWxlLW5vLXJlc3RyaWN0ZWQtcGVybXMNCiAgICAgICAgICBJZiBwcmVzZW50LCBsb2cgZmlsZXMgd2lsbCBiZSBnZW5lcmF0ZWQgYXMgd29ybGQtcmVhZGFibGUgbWVhbmluZyB0aGV5DQogICAgICAgICAgY2FuIGJlIHJlYWQgYnkgYW55IHVzZXIgb24gdGhlIG1hY2hpbmUuIE5vdGUgdGhhdCBsb2dzIGNhbiBvZnRlbg0KICAgICAgICAgIGNvbnRhaW4gc2Vuc2l0aXZlIGluZm9ybWF0aW9uIGFib3V0IHlvdXIgdmFsaWRhdG9yIGFuZCBzbyB0aGlzIGZsYWcNCiAgICAgICAgICBzaG91bGQgYmUgdXNlZCB3aXRoIGNhdXRpb24uIEZvciBXaW5kb3dzIHVzZXJzLCB0aGUgbG9nIGZpbGUNCiAgICAgICAgICBwZXJtaXNzaW9ucyB3aWxsIGJlIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgZm9sZGVyLg0KDQogICAgICCBmoOBg2eDioNOg1iXTIz4gUKKxI6Ll3CBQg0KICAgICAgLS1tZXRyaWNzDQogICAgICAgICAgRW5hYmxlIHRoZSBQcm9tZXRoZXVzIG1ldHJpY3MgSFRUUCBzZXJ2ZXIuIERpc2FibGVkIGJ5IGRlZmF1bHQuDQoNCiAgICAgIIGag06DiYNDg0GDk4Nnjq+Vyo/ulfGC8IlClcGCt4LpDQogICAgICAtLXByaXZhdGUNCiAgICAgICAgICBQcmV2ZW50cyBzZW5kaW5nIHZhcmlvdXMgY2xpZW50IGlkZW50aWZpY2F0aW9uIGluZm9ybWF0aW9uLg0KDQogICAgICCBmoNvg4qDZoFbg16XcA0KICAgICAgLS1wcm9wb3Nlci1vbmx5DQogICAgICAgICAgU2V0cyB0aGlzIGJlYWNvbiBub2RlIGF0IGJlIGEgYmxvY2sgcHJvcG9zZXIgb25seSBub2RlLiBUaGlzIHdpbGwgcnVuDQogICAgICAgICAgdGhlIGJlYWNvbiBub2RlIGluIGEgbWluaW1hbCBjb25maWd1cmF0aW9uIHRoYXQgaXMgc3VmZmljaWVudCBmb3INCiAgICAgICAgICBibG9jayBwdWJsaXNoaW5nIG9ubHkuIFRoaXMgZmxhZyBzaG91bGQgYmUgdXNlZCBmb3IgYSBiZWFjb24gbm9kZQ0KICAgICAgICAgIGJlaW5nIHJlZmVyZW5jZWQgYnkgdmFsaWRhdG9yIGNsaWVudCB1c2luZyB0aGUgLS1wcm9wb3Nlci1ub2RlIGZsYWcuDQogICAgICAgICAgVGhpcyBjb25maWd1cmF0aW9uIGlzIGZvciBlbmFibGluZyBtb3JlIHNlY3VyZSBzZXR1cHMuDQogICAgICAtLXB1cmdlLWRiDQogICAgICAgICAgSWYgcHJlc2VudCwgdGhlIGNoYWluIGRhdGFiYXNlIHdpbGwgYmUgZGVsZXRlZC4gVXNlIHdpdGggY2F1dGlvbi4NCiAgICAgIC0tcmVjb25zdHJ1Y3QtaGlzdG9yaWMtc3RhdGVzDQogICAgICAgICAgQWZ0ZXIgYSBjaGVja3BvaW50IHN5bmMsIHJlY29uc3RydWN0IGhpc3RvcmljIHN0YXRlcyBpbiB0aGUgZGF0YWJhc2UuDQogICAgICAgICAgVGhpcyByZXF1aXJlcyBzeW5jaW5nIGFsbCB0aGUgd2F5IGJhY2sgdG8gZ2VuZXNpcy4NCiAgICAgIC0tcmVzZXQtcGF5bG9hZC1zdGF0dXNlcw0KICAgICAgICAgIFdoZW4gcHJlc2VudCwgTGlnaHRob3VzZSB3aWxsIGZvcmdldCB0aGUgcGF5bG9hZCBzdGF0dXNlcyBvZiBhbnkNCiAgICAgICAgICBhbHJlYWR5LWltcG9ydGVkIGJsb2Nrcy4gVGhpcyBjYW4gYXNzaXN0IGluIHRoZSByZWNvdmVyeSBmcm9tIGENCiAgICAgICAgICBjb25zZW5zdXMgZmFpbHVyZSBjYXVzZWQgYnkgdGhlIGV4ZWN1dGlvbiBsYXllci4NCiAgICAgIC0tc2h1dGRvd24tYWZ0ZXItc3luYw0KICAgICAgICAgIFNodXRkb3duIGJlYWNvbiBub2RlIGFzIHNvb24gYXMgc3luYyBpcyBjb21wbGV0ZWQuIEJhY2tmaWxsIHN5bmMgd2lsbA0KICAgICAgICAgIG5vdCBiZSBwZXJmb3JtZWQgYmVmb3JlIHNodXRkb3duLg0KICAgICAgLS1zbGFzaGVyDQogICAgICAgICAgUnVuIGEgc2xhc2hlciBhbG9uZ3NpZGUgdGhlIGJlYWNvbiBub2RlLiBJdCBpcyBjdXJyZW50bHkgb25seQ0KICAgICAgICAgIHJlY29tbWVuZGVkIGZvciBleHBlcnQgdXNlcnMgYmVjYXVzZSBvZiB0aGUgaW1tYXR1cml0eSBvZiB0aGUgc2xhc2hlcg0KICAgICAgICAgIFVYIGFuZCB0aGUgZXh0cmEgcmVzb3VyY2VzIHJlcXVpcmVkLg0KICAgICAgLS1zdGFraW5nDQogICAgICAgICAgU3RhbmRhcmQgb3B0aW9uIGZvciBhIHN0YWtpbmcgYmVhY29uIG5vZGUuIFRoaXMgd2lsbCBlbmFibGUgdGhlIEhUVFANCiAgICAgICAgICBzZXJ2ZXIgb24gbG9jYWxob3N0OjUwNTIgYW5kIGltcG9ydCBkZXBvc2l0IGxvZ3MgZnJvbSB0aGUgZXhlY3V0aW9uDQogICAgICAgICAgbm9kZS4gVGhpcyBpcyBlcXVpdmFsZW50IHRvIGAtLWh0dHBgIG9uIG1lcmdlLXJlYWR5IG5ldHdvcmtzLCBvcg0KICAgICAgICAgIGAtLWh0dHAgLS1ldGgxYCBwcmUtbWVyZ2UNCiAgICAgIC0tc3Vic2NyaWJlLWFsbC1zdWJuZXRzDQogICAgICAgICAgU3Vic2NyaWJlIHRvIGFsbCBzdWJuZXRzIHJlZ2FyZGxlc3Mgb2YgdmFsaWRhdG9yIGNvdW50LiBUaGlzIHdpbGwgYWxzbw0KICAgICAgICAgIGFkdmVydGlzZSB0aGUgYmVhY29uIG5vZGUgYXMgYmVpbmcgbG9uZy1saXZlZCBzdWJzY3JpYmVkIHRvIGFsbA0KICAgICAgICAgIHN1Ym5ldHMuDQogICAgICAtLXZhbGlkYXRvci1tb25pdG9yLWF1dG8NCiAgICAgICAgICBFbmFibGVzIHRoZSBhdXRvbWF0aWMgZGV0ZWN0aW9uIGFuZCBtb25pdG9yaW5nIG9mIHZhbGlkYXRvcnMgY29ubmVjdGVkDQogICAgICAgICAgdG8gdGhlIEhUVFAgQVBJIGFuZCB1c2luZyB0aGUgc3VibmV0IHN1YnNjcmlwdGlvbiBlbmRwb2ludC4gVGhpcw0KICAgICAgICAgIGdlbmVyYWxseSBoYXMgdGhlIGVmZmVjdCBvZiBwcm92aWRpbmcgYWRkaXRpb25hbCBsb2dnaW5nIGFuZCBtZXRyaWNzDQogICAgICAgICAgZm9yIGxvY2FsbHkgY29udHJvbGxlZCB2YWxpZGF0b3JzLg0KICAteiwgLS16ZXJvLXBvcnRzDQogICAgICAgICAgU2V0cyBhbGwgbGlzdGVuaW5nIFRDUC9VRFAgcG9ydHMgdG8gMCwgYWxsb3dpbmcgdGhlIE9TIHRvIGNob29zZSBzb21lDQogICAgICAgICAgYXJiaXRyYXJ5IGZyZWUgcG9ydHMuDQo=